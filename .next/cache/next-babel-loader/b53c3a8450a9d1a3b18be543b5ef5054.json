{"ast":null,"code":"import Cookies from \"js-cookie\";\nimport fetch from \"isomorphic-unfetch\";\nimport { handleResponse } from \"../_helpers\";\nimport Router from \"next/router\";\nlet currentUserSubject = Cookies.getJSON(\"currentUser\") ? Cookies.getJSON(\"currentUser\") : {};\nconst target = `https://intim-vibe-api.padilo.pro/api`;\nexport const authenticationService = {\n  login,\n  logout,\n  registrationAdmin,\n  registrationClient,\n  registrationProvider,\n  registrationAgency,\n  currentUser: currentUserSubject,\n\n  get currentUserValue() {\n    return currentUserSubject;\n  }\n\n};\n\nasync function login(email, password) {\n  Cookies.remove(\"currentUser\");\n  return await fetch(`${target}/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(handleResponse).then(user => {\n    if (user.token) {\n      Cookies.set(\"currentUser\", JSON.stringify(user), {\n        expires: 1\n      });\n      currentUserSubject = user;\n      return user;\n    }\n  }).then(user => {\n    if (user.user.role === 'client') {\n      Router.push('/userCabinet');\n    } else if (user.user.role = 'individual') {\n      Router.push('/modelCabinet');\n    } else if (user.user.role === 'admin') {\n      Router.push('/admin');\n    } else if (user.user.role === 'agency') {\n      Router.push('/modelCabinet');\n    }\n  }) // .then(() => window.location.reload(true))\n  .catch(err => console.error(\"Error:\", err));\n}\n\nasync function registrationClient(name, password, email, password_confirmation) {\n  Cookies.remove(\"currentUser\");\n  return await fetch(`https://intim-vibe-api.padilo.pro/api/client/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      password,\n      email,\n      password_confirmation\n    })\n  }).then(handleResponse) // .then((client) => {\n  //   Cookies.set(\"currentUser\", JSON.stringify(client));\n  //   currentUserSubject = client;\n  //   return client;\n  // })\n  // .then(() => {\n  //   login(email, password);\n  // })\n  // .then(() => window.location.reload(true))\n  .catch(err => console.error(\"Error:\", err));\n}\n\nasync function registrationAdmin(name, password, email, password_confirmation) {\n  Cookies.remove(\"currentUser\");\n  return await fetch(`${target}/admin/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      password,\n      email,\n      password_confirmation\n    })\n  }).then(handleResponse) // .then((admin) => {\n  //   Cookies.set(\"currentUser\", JSON.stringify(admin));\n  //   currentUserSubject = admin;\n  //   return admin;\n  // })\n  // .then(() => {\n  //   login(email, password);\n  // })\n  // .then(() => window.location.reload(true))\n  .catch(err => console.error(\"Error:\", err));\n}\n\nasync function registrationProvider(name, password, email, password_confirmation, phone) {\n  Cookies.remove(\"currentUser\");\n  return await fetch(`${target}/individual/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      password,\n      email,\n      password_confirmation,\n      phone\n    })\n  }).then(handleResponse) // .then((provider) => {\n  //   Cookies.set(\"currentUser\", JSON.stringify(provider.user));\n  //   currentUserSubject = provider;\n  //   return provider;\n  // })\n  // .then(() => {\n  //   login(email, password);\n  // })\n  // .then(() => window.location.reload(true))\n  .catch(err => console.error(\"Error:\", err));\n}\n\nasync function registrationAgency(name, password, email, password_confirmation, phone, agency_name) {\n  Cookies.remove(\"currentUser\");\n  const response = await fetch(`${target}/agency/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      password,\n      email,\n      password_confirmation,\n      phone,\n      agency_name\n    })\n  });\n  const promise = response.json();\n  promise.then(provider => {// Cookies.set(\"currentUser\", JSON.stringify(provider));\n    // currentUserSubject = provider;\n    // return provider;\n  }) // .then(() => login(email, password))\n  // .then(() => window.location.reload(true))\n  .catch(err => console.error(\"Error:\", err));\n}\n\nasync function logout() {\n  Cookies.remove(\"currentUser\");\n  return await fetch(`${target}/logout`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\"\n    }\n  }).then(() => Router.push('/login')).then(() => window.location.reload(true)).catch(err => console.error(\"Error:\", err));\n}","map":{"version":3,"sources":["/home/dev-2/WebstormProjects/vibe/src/_services/authentication.service.ts"],"names":["Cookies","fetch","handleResponse","Router","currentUserSubject","getJSON","target","authenticationService","login","logout","registrationAdmin","registrationClient","registrationProvider","registrationAgency","currentUser","currentUserValue","email","password","remove","method","headers","body","JSON","stringify","then","user","token","set","expires","role","push","catch","err","console","error","name","password_confirmation","phone","agency_name","response","promise","json","provider","window","location","reload"],"mappings":"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","sourcesContent":["import Cookies from \"js-cookie\";\nimport fetch from \"isomorphic-unfetch\";\nimport { handleResponse } from \"../_helpers\";\nimport Router from \"next/router\";\n\nlet currentUserSubject = Cookies.getJSON(\"currentUser\")\n  ? Cookies.getJSON(\"currentUser\")\n  : {};\n\nconst target = `https://intim-vibe-api.padilo.pro/api`;\n\nexport const authenticationService = {\n  login,\n  logout,\n  registrationAdmin,\n  registrationClient,\n  registrationProvider,\n  registrationAgency,\n  currentUser: currentUserSubject,\n  get currentUserValue() {\n    return currentUserSubject;\n  },\n};\n\nasync function login(email: string, password: string): Promise<any> {\n  Cookies.remove(\"currentUser\");\n  return await fetch(`${target}/login`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ email, password }),\n  })\n    .then(handleResponse)\n    .then((user) => {\n      if (user.token) {\n        Cookies.set(\"currentUser\", JSON.stringify(user), { expires: 1 });\n        currentUserSubject = user;\n        return user;\n      }\n    }).then((user) => {\n      if (user.user.role === 'client') {\n        Router.push('/userCabinet');\n      } else if (user.user.role = 'individual') {\n        Router.push('/modelCabinet');\n      } else if (user.user.role === 'admin') {\n        Router.push('/admin');\n      } else if (user.user.role === 'agency') {\n        Router.push('/modelCabinet');\n      }\n    })\n    // .then(() => window.location.reload(true))\n    .catch((err) => console.error(\"Error:\", err));\n}\nasync function registrationClient(\n  name: string,\n  password: string,\n  email: string,\n  password_confirmation: string\n): Promise<any> {\n  Cookies.remove(\"currentUser\");\n  return await fetch(`https://intim-vibe-api.padilo.pro/api/client/register`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\", 'Accept': 'application/json' },\n    body: JSON.stringify({\n      name,\n      password,\n      email,\n      password_confirmation,\n    }),\n  })\n    .then(handleResponse)\n    // .then((client) => {\n    //   Cookies.set(\"currentUser\", JSON.stringify(client));\n    //   currentUserSubject = client;\n    //   return client;\n    // })\n    // .then(() => {\n    //   login(email, password);\n    // })\n    // .then(() => window.location.reload(true))\n    .catch((err) => console.error(\"Error:\", err));\n}\nasync function registrationAdmin(\n  name: string,\n  password: string,\n  email: string,\n  password_confirmation: string\n): Promise<any> {\n  Cookies.remove(\"currentUser\");\n  return await fetch(`${target}/admin/register`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\", 'Accept': 'application/json' },\n    body: JSON.stringify({\n      name,\n      password,\n      email,\n      password_confirmation,\n    }),\n  })\n    .then(handleResponse)\n    // .then((admin) => {\n    //   Cookies.set(\"currentUser\", JSON.stringify(admin));\n    //   currentUserSubject = admin;\n    //   return admin;\n    // })\n    // .then(() => {\n    //   login(email, password);\n    // })\n    // .then(() => window.location.reload(true))\n    .catch((err) => console.error(\"Error:\", err));\n}\nasync function registrationProvider(\n  name: string,\n  password: string,\n  email: string,\n  password_confirmation: string,\n  phone: string | number\n): Promise<any> {\n  Cookies.remove(\"currentUser\");\n  return await fetch(`${target}/individual/register`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\", 'Accept': 'application/json' },\n    body: JSON.stringify({\n      name,\n      password,\n      email,\n      password_confirmation,\n      phone\n    }),\n  })\n    .then(handleResponse)\n    // .then((provider) => {\n    //   Cookies.set(\"currentUser\", JSON.stringify(provider.user));\n    //   currentUserSubject = provider;\n    //   return provider;\n    // })\n    // .then(() => {\n    //   login(email, password);\n    // })\n    // .then(() => window.location.reload(true))\n    .catch((err) => console.error(\"Error:\", err));\n}\nasync function registrationAgency(\n  name: string,\n  password: string,\n  email: string,\n  password_confirmation: string,\n  phone: string | number,\n  agency_name: string\n): Promise<any> {\n  Cookies.remove(\"currentUser\");\n  const response = await fetch(`${target}/agency/register`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\", 'Accept': 'application/json' },\n    body: JSON.stringify({\n      name,\n      password,\n      email,\n      password_confirmation,\n      phone,\n      agency_name\n    }),\n  });\n  const promise = response.json();\n  promise.then(provider => {\n    // Cookies.set(\"currentUser\", JSON.stringify(provider));\n    // currentUserSubject = provider;\n    // return provider;\n  })\n    // .then(() => login(email, password))\n    // .then(() => window.location.reload(true))\n    .catch((err) => console.error(\"Error:\", err));\n}\nasync function logout(): Promise<any> {\n  Cookies.remove(\"currentUser\");\n  return await fetch(`${target}/logout`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n    },\n  })\n    .then(() => Router.push('/login'))\n    .then(() => window.location.reload(true))\n    .catch((err) => console.error(\"Error:\", err));\n}\n"]},"metadata":{},"sourceType":"module"}