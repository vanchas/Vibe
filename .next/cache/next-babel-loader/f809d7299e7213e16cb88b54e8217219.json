{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_POST, REMOVE_POST, UPDATE_POST } from \"../actions/types\";\nvar initialState = {\n  providerPosts: []\n};\nexport var providerReducer = function providerReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        providerPosts: state.providerPosts.concat(action.payload)\n      });\n\n    case REMOVE_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        providerPosts: action.payload\n      });\n\n    case UPDATE_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        providerPosts: action.payload\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/user/projects/vibe/src/redux/reducers/providerReducer.ts"],"names":["ADD_POST","REMOVE_POST","UPDATE_POST","initialState","providerPosts","providerReducer","state","action","type","concat","payload"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,WAAhC,QAAmD,kBAAnD;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,aAAa,EAAE;AADI,CAArB;AAIA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAuC;AAAA,MAAtCC,KAAsC,uEAA9BH,YAA8B;AAAA,MAAhBI,MAAgB;;AACpE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,QAAL;AACE,6CAAYM,KAAZ;AAAmBF,QAAAA,aAAa,EAAEE,KAAK,CAACF,aAAN,CAAoBK,MAApB,CAA2BF,MAAM,CAACG,OAAlC;AAAlC;;AAEF,SAAKT,WAAL;AACE,6CAAYK,KAAZ;AAAmBF,QAAAA,aAAa,EAAEG,MAAM,CAACG;AAAzC;;AAEF,SAAKR,WAAL;AACE,6CAAYI,KAAZ;AAAmBF,QAAAA,aAAa,EAAEG,MAAM,CAACG;AAAzC;;AAEF;AACE,aAAOJ,KAAP;AAXJ;AAaD,CAdM","sourcesContent":["import { ADD_POST, REMOVE_POST, UPDATE_POST } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  providerPosts: []\r\n};\r\n\r\nexport const providerReducer = (state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case ADD_POST:\r\n      return { ...state, providerPosts: state.providerPosts.concat(action.payload) }\r\n\r\n    case REMOVE_POST:\r\n      return { ...state, providerPosts: action.payload }\r\n\r\n    case UPDATE_POST:\r\n      return { ...state, providerPosts: action.payload }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}