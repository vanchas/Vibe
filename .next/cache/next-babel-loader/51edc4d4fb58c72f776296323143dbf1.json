{"ast":null,"code":"import Cookies from \"js-cookie\";\nimport fetch from \"isomorphic-unfetch\";\nimport Router from \"next/router\";\nimport store from \"../redux/store\";\nimport { showAlert, showSuccess } from \"../redux/actions/actions\";\nlet currentUserSubject = Cookies.getJSON(\"currentUser\") ? Cookies.getJSON(\"currentUser\") : {};\nconst target = `https://intim-vibe-api.padilo.pro/api`;\nexport const authenticationService = {\n  login,\n  logout,\n  registrationAdmin,\n  registrationClient,\n  registrationProvider,\n  registrationAgency,\n  currentUser: currentUserSubject,\n\n  get currentUserValue() {\n    return currentUserSubject;\n  }\n\n};\n\nasync function login(email, password) {\n  Cookies.remove(\"currentUser\");\n  const response = await fetch(`${target}/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  const promise = response.json();\n\n  if (response.status === 200) {\n    return promise.then(data => {\n      Cookies.set(\"currentUser\", JSON.stringify(data), {\n        expires: 1\n      });\n      currentUserSubject = data;\n      return data;\n    }).then(() => Router.push('/')).then(() => window.location.reload()).catch(err => console.error(\"Error:\", err));\n  } else {\n    return promise.then(data => store.dispatch(showAlert(data.message))).catch(err => console.error(\"Error:\", err));\n  }\n}\n\nasync function registrationClient(name, password, email, password_confirmation) {\n  Cookies.remove(\"currentUser\");\n  const response = await fetch(`https://intim-vibe-api.padilo.pro/api/client/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      password,\n      email,\n      password_confirmation\n    })\n  });\n  const promise = response.json();\n\n  if (response.status === 201) {\n    return promise.then(data => {\n      store.dispatch(showSuccess(data.message));\n      setTimeout(() => window.location.reload(), 3000);\n    }).catch(err => console.error(\"Error:\", err));\n  } else {\n    return promise.then(data => store.dispatch(showAlert(data.message))).catch(err => console.error(\"Error:\", err));\n  }\n}\n\nasync function registrationAdmin(name, password, email, password_confirmation) {\n  Cookies.remove(\"currentUser\");\n  const response = await fetch(`${target}/admin/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      password,\n      email,\n      password_confirmation\n    })\n  });\n  const promise = response.json();\n\n  if (response.status === 201) {\n    return promise.then(data => {\n      store.dispatch(showSuccess(data.message));\n      setTimeout(() => window.location.reload(), 3000);\n    }).catch(err => console.error(\"Error:\", err));\n  } else {\n    return promise.then(data => store.dispatch(showAlert(data.message))).catch(err => console.error(\"Error:\", err));\n  }\n}\n\nasync function registrationProvider(name, password, email, password_confirmation, phone) {\n  Cookies.remove(\"currentUser\");\n  const response = await fetch(`${target}/individual/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      password,\n      email,\n      password_confirmation,\n      phone\n    })\n  });\n  const promise = response.json();\n\n  if (response.status === 201) {\n    return promise.then(data => {\n      store.dispatch(showSuccess(data.message));\n      setTimeout(() => window.location.reload(), 3000);\n    }).catch(err => console.error(\"Error:\", err));\n  } else {\n    return promise.then(data => store.dispatch(showAlert(data.message))).catch(err => console.error(\"Error:\", err));\n  }\n}\n\nasync function registrationAgency(name, password, email, password_confirmation, phone, agency_name) {\n  Cookies.remove(\"currentUser\");\n  const response = await fetch(`${target}/agency/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      password,\n      email,\n      password_confirmation,\n      phone,\n      agency_name\n    })\n  });\n  const promise = response.json();\n\n  if (response.status === 201) {\n    return promise.then(data => {\n      store.dispatch(showSuccess(data.message));\n      setTimeout(() => window.location.reload(), 3000);\n    }).catch(err => console.error(\"Error:\", err));\n  } else {\n    return promise.then(data => store.dispatch(showAlert(data.message))).catch(err => console.error(\"Error:\", err));\n  }\n}\n\nasync function logout() {\n  Cookies.remove(\"currentUser\");\n  return await fetch(`${target}/logout`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\"\n    }\n  }).then(() => Router.push('/login')).then(() => window.location.reload(true)).catch(err => console.error(\"Error:\", err));\n}","map":null,"metadata":{},"sourceType":"module"}