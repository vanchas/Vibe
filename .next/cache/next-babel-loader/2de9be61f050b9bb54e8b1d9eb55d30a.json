{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { useRouter } from 'next/router';\nimport { authenticationService } from '../../_services';\nexport default function SignUp() {\n  var router = useRouter();\n  return __jsx(\"div\", {\n    className: \"bg-light\"\n  }, __jsx(\"h2\", null, \"Registration\"), __jsx(Formik, {\n    initialValues: {\n      username: '',\n      email: '',\n      phone: '',\n      password: '',\n      password_confirmation: ''\n    },\n    validationSchema: Yup.object().shape({\n      username: Yup.string().required('Username is required'),\n      password: Yup.string().required('Password is required')\n    }),\n    onSubmit: function onSubmit(_ref, _ref2) {\n      var username = _ref.username,\n          email = _ref.email,\n          phone = _ref.phone,\n          password = _ref.password,\n          password_confirmation = _ref.password_confirmation;\n      var setStatus = _ref2.setStatus,\n          setSubmitting = _ref2.setSubmitting;\n      setStatus();\n      authenticationService.registration(username, email, phone, password, password_confirmation).then(function (user) {\n        var _from = // this.props.location.state ||\n        {\n          from: {\n            pathname: \"/\"\n          }\n        },\n            from = _from.from;\n        router.push(from);\n      }, function (error) {\n        setSubmitting(false);\n        setStatus(error);\n      });\n    },\n    render: function render(_ref3) {\n      var errors = _ref3.errors,\n          status = _ref3.status,\n          touched = _ref3.touched,\n          isSubmitting = _ref3.isSubmitting;\n      return __jsx(Form, null, __jsx(\"div\", {\n        className: \"form-group\"\n      }, __jsx(\"label\", {\n        htmlFor: \"username\"\n      }, \"Username\"), __jsx(Field, {\n        name: \"username\",\n        type: \"text\",\n        className: 'form-control' + (errors.username && touched.username ? ' is-invalid' : '')\n      }), __jsx(ErrorMessage, {\n        name: \"username\",\n        component: \"div\",\n        className: \"invalid-feedback\"\n      })), __jsx(\"div\", {\n        className: \"form-group\"\n      }, __jsx(\"label\", {\n        htmlFor: \"email\"\n      }, \"Email\"), __jsx(Field, {\n        name: \"email\",\n        type: \"email\",\n        className: 'form-control' + (errors.email && touched.email ? ' is-invalid' : '')\n      }), __jsx(ErrorMessage, {\n        name: \"email\",\n        component: \"div\",\n        className: \"invalid-feedback\"\n      })), __jsx(\"div\", {\n        className: \"form-group\"\n      }, __jsx(\"label\", {\n        htmlFor: \"phone\"\n      }, \"Phone\"), __jsx(Field, {\n        name: \"phone\",\n        type: \"number\",\n        className: 'form-control' + (errors.phone && touched.phone ? ' is-invalid' : '')\n      }), __jsx(ErrorMessage, {\n        name: \"phone\",\n        component: \"div\",\n        className: \"invalid-feedback\"\n      })), __jsx(\"div\", {\n        className: \"form-group\"\n      }, __jsx(\"label\", {\n        htmlFor: \"password\"\n      }, \"Password\"), __jsx(Field, {\n        name: \"password\",\n        type: \"password\",\n        className: 'form-control' + (errors.password && touched.password ? ' is-invalid' : '')\n      }), __jsx(ErrorMessage, {\n        name: \"password\",\n        component: \"div\",\n        className: \"invalid-feedback\"\n      })), __jsx(\"div\", {\n        className: \"form-group\"\n      }, __jsx(\"label\", {\n        htmlFor: \"password_confirmation\"\n      }, \"Confirm password\"), __jsx(Field, {\n        name: \"password_confirmation\",\n        type: \"password\",\n        className: 'form-control' + (errors.password_confirmation && touched.password_confirmation ? ' is-invalid' : '')\n      }), __jsx(ErrorMessage, {\n        name: \"password_confirmation\",\n        component: \"div\",\n        className: \"invalid-feedback\"\n      })), __jsx(\"div\", {\n        className: \"form-group\"\n      }, __jsx(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        disabled: isSubmitting\n      }, \"Login\"), isSubmitting && __jsx(\"div\", {\n        className: \"spinner-border spinner-border-sm text-primary ml-3\",\n        role: \"status\"\n      }, __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \"Loading...\"))), status && __jsx(\"div\", {\n        className: 'alert alert-danger'\n      }, status));\n    }\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}