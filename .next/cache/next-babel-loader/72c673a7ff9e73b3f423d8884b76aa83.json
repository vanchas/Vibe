{"ast":null,"code":"var __jsx = React.createElement;\nimport App from 'next/app';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport './styles/app.scss';\nimport Layout from '../components/layout/Layout';\nimport withRedux from \"next-redux-wrapper\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport store from '../redux/store';\nimport Head from 'next/head';\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\nclass CustomApp extends App {\n  static async getInitialProps(props) {\n    const pageProps = props.Component.getInitialProps ? await props.Component.getInitialProps(props.ctx) : {};\n    return {\n      pageProps: pageProps\n    };\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      store\n    } = this.props;\n    return __jsx(Provider, {\n      store: store\n    }, __jsx(Head, null, __jsx(\"meta\", {\n      charSet: \"utf-8\"\n    }), __jsx(\"meta\", {\n      httpEquiv: \"X-UA-Compatible\",\n      content: \"IE=edge\"\n    }), __jsx(\"meta\", {\n      name: \"viewport\",\n      content: \"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no\"\n    }), __jsx(\"meta\", {\n      name: \"description\",\n      content: \"Description\"\n    }), __jsx(\"meta\", {\n      name: \"keywords\",\n      content: \"Keywords\"\n    }), __jsx(\"title\", null, \"Next.js PWA Example\"), __jsx(\"link\", {\n      rel: \"manifest\",\n      href: \"/manifest.json\"\n    }), __jsx(\"link\", {\n      href: \"/favicon-16x16.png\",\n      rel: \"icon\",\n      type: \"image/png\",\n      sizes: \"16x16\"\n    }), __jsx(\"link\", {\n      href: \"/favicon-32x32.png\",\n      rel: \"icon\",\n      type: \"image/png\",\n      sizes: \"32x32\"\n    }), __jsx(\"link\", {\n      rel: \"apple-touch-icon\",\n      href: \"/apple-icon.png\"\n    }), __jsx(\"meta\", {\n      name: \"theme-color\",\n      content: \"#317EFB\"\n    })), __jsx(Layout, null, __jsx(Component, pageProps)));\n  }\n\n} //makeStore function that returns a new store for every request\n\n\nconst makeStore = () => store; //withRedux wrapper that passes the store to the App Component\n\n\nexport default withRedux(makeStore)(CustomApp);","map":null,"metadata":{},"sourceType":"module"}