{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ADD_POST, UPDATE_POST, REMOVE_POST, GET_ALL_POSTS } from \"./types\";\nimport fetch from 'isomorphic-unfetch';\nimport Cors from 'cors'; // Initializing the cors middleware\n\nvar cors = Cors({\n  methods: ['GET', 'HEAD', 'POST']\n});\n\nfunction runMiddleware(req, res, fn) {\n  return new Promise(function (resolve, reject) {\n    fn(req, res, function (result) {\n      if (result instanceof Error) {\n        return reject(result);\n      }\n\n      return resolve(result);\n    });\n  });\n}\n\nexport function handler(_x, _x2) {\n  return _handler.apply(this, arguments);\n}\n\nfunction _handler() {\n  _handler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return runMiddleware(req, res, cors);\n\n          case 2:\n            // Rest of the API logic\n            res.json({\n              message: 'Hello Everyone!'\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _handler.apply(this, arguments);\n}\n\nexport function getAllProviderPost() {\n  return {\n    type: GET_ALL_POSTS\n  };\n}\n;\nexport function addProviderPost(_x3) {\n  return _addProviderPost.apply(this, arguments);\n}\n\nfunction _addProviderPost() {\n  _addProviderPost = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(post) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch('https://intim-vibe-api.padilo.pro/api/posts/create', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*'\n              },\n              body: JSON.stringify({\n                gender: 'female',\n                age: 25,\n                ethnicity: 'some',\n                hair_color: 'some',\n                eye_color: 'some',\n                height: 'some',\n                affiliation: 'some',\n                number: '+0123456789',\n                email: 'some@mail.com',\n                model_name: 'some',\n                video_link: 'some',\n                about: 'some',\n                available_to: ['some', 'some'],\n                availability: ['some', 'some'],\n                summary: 'some',\n                second_name: 'some',\n                account_name: 'some',\n                category: 'some',\n                //         не обязательные поля:\n                status: 'other'\n              })\n            }).then(function (res) {\n              return console.log(res);\n            })[\"catch\"](function (err) {\n              return console.log('Error:', err);\n            });\n\n          case 2:\n            return _context2.abrupt(\"return\", {\n              type: ADD_POST,\n              payload: post\n            });\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _addProviderPost.apply(this, arguments);\n}\n\n;\nexport function updateProviderPost(post) {\n  return {\n    type: UPDATE_POST,\n    payload: post\n  };\n}\n;\nexport function removeProviderPost(id) {\n  return {\n    type: REMOVE_POST,\n    payload: id\n  };\n}\n; // export function showAlert(text: string): any {\n//     return (dispatch: Function) => {\n//         dispatch({\n//             type: SHOW_ALERT,\n//             payload: text\n//         })\n//         setTimeout(() => {\n//             dispatch(hideAlert())\n//         }, 3000)\n//     }\n// }","map":{"version":3,"sources":["C:/Users/user/projects/vibe/src/redux/actions/providerActions.ts"],"names":["ADD_POST","UPDATE_POST","REMOVE_POST","GET_ALL_POSTS","fetch","Cors","cors","methods","runMiddleware","req","res","fn","Promise","resolve","reject","result","Error","handler","json","message","getAllProviderPost","type","addProviderPost","post","method","headers","body","JSON","stringify","gender","age","ethnicity","hair_color","eye_color","height","affiliation","number","email","model_name","video_link","about","available_to","availability","summary","second_name","account_name","category","status","then","console","log","err","payload","updateProviderPost","removeProviderPost","id"],"mappings":"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","sourcesContent":["import { ADD_POST, ProviderPost, UPDATE_POST, REMOVE_POST, GET_ALL_POSTS } from \"./types\"\r\nimport { NextApiRequest, NextApiResponse } from 'next'\r\nimport fetch from 'isomorphic-unfetch'\r\nimport Cors from 'cors'\r\n\r\n// Initializing the cors middleware\r\nconst cors = Cors({\r\n  methods: ['GET', 'HEAD', 'POST'],\r\n})\r\n\r\nfunction runMiddleware(req: NextApiRequest, res:NextApiResponse, fn: any) {\r\n  return new Promise((resolve, reject) => {\r\n    fn(req, res, (result: any) => {\r\n      if (result instanceof Error) {\r\n        return reject(result)\r\n      }\r\n\r\n      return resolve(result)\r\n    })\r\n  })\r\n}\r\n\r\nexport async function handler(req: NextApiRequest, res:NextApiResponse) {\r\n  // Run the middleware\r\n  await runMiddleware(req, res, cors)\r\n\r\n  // Rest of the API logic\r\n  res.json({ message: 'Hello Everyone!' })\r\n}\r\n\r\nexport function getAllProviderPost(): any {\r\n  return {\r\n    type: GET_ALL_POSTS\r\n  }\r\n};\r\nexport async function addProviderPost(post: ProviderPost): Promise<any> {\r\n  await fetch('https://intim-vibe-api.padilo.pro/api/posts/create', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Access-Control-Allow-Origin': '*'\r\n    },\r\n    body: JSON.stringify({\r\n      gender: 'female',\r\n      age: 25,\r\n      ethnicity: 'some',\r\n      hair_color: 'some',\r\n      eye_color: 'some',\r\n      height: 'some',\r\n      affiliation: 'some',\r\n      number: '+0123456789',\r\n      email: 'some@mail.com',\r\n      model_name: 'some',\r\n      video_link: 'some',\r\n      about: 'some',\r\n      available_to: ['some', 'some'],\r\n      availability: ['some', 'some'],\r\n      summary: 'some',\r\n      second_name: 'some',\r\n      account_name: 'some',\r\n      category: 'some',\r\n      //         не обязательные поля:\r\n      status: 'other'\r\n    })\r\n  })\r\n    .then(res => console.log(res))\r\n    .catch(err => console.log('Error:', err))\r\n\r\n  return {\r\n    type: ADD_POST,\r\n    payload: post\r\n  }\r\n};\r\nexport function updateProviderPost(post: ProviderPost): any {\r\n  return {\r\n    type: UPDATE_POST,\r\n    payload: post\r\n  }\r\n};\r\nexport function removeProviderPost(id: number | string): any {\r\n  return {\r\n    type: REMOVE_POST,\r\n    payload: id\r\n  }\r\n};\r\n\r\n// export function showAlert(text: string): any {\r\n//     return (dispatch: Function) => {\r\n//         dispatch({\r\n//             type: SHOW_ALERT,\r\n//             payload: text\r\n//         })\r\n//         setTimeout(() => {\r\n//             dispatch(hideAlert())\r\n//         }, 3000)\r\n//     }\r\n// }\r\n\r\n"]},"metadata":{},"sourceType":"module"}