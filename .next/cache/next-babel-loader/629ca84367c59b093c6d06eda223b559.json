{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { authenticationService } from '../_services';\nexport const PrivateRoute = (_ref) => {\n  let {\n    component: Component,\n    roles\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"component\", \"roles\"]);\n\n  return __jsx(Route, _extends({}, rest, {\n    render: props => {\n      const currentUser = authenticationService.currentUserValue;\n\n      if (!currentUser) {\n        // not logged in so redirect to login page with the return url\n        return __jsx(Redirect, {\n          to: {\n            pathname: '/login',\n            state: {\n              from: props.location\n            }\n          }\n        });\n      } // check if route is restricted by role\n\n\n      if (roles && roles.indexOf(currentUser.role) === -1) {\n        // role not authorised so redirect to home page\n        return __jsx(Redirect, {\n          to: {\n            pathname: '/'\n          }\n        });\n      } // authorised so return component\n\n\n      return __jsx(Component, props);\n    }\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}