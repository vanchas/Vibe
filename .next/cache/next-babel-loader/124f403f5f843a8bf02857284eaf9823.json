{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\projects\\\\vibe\\\\src\\\\components\\\\login-page\\\\SignUp.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport s from './login.module.scss';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { useRouter } from 'next/router';\nimport { authenticationService } from '../../_services';\nexport default function SignUp() {\n  _s();\n\n  var _this = this;\n\n  var router = useRouter();\n\n  var _useState = useState(true),\n      formUser = _useState[0],\n      setFormUser = _useState[1];\n\n  return __jsx(\"div\", {\n    className: s.login_page_form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, \"Registration\"), __jsx(Formik, {\n    initialValues: {\n      username: '',\n      email: '',\n      password: '',\n      password_confirmation: '',\n      phone: ''\n    },\n    validationSchema: Yup.object().shape(formUser ? {\n      username: Yup.string().required('Username is required'),\n      password: Yup.string().required('Password is required'),\n      email: Yup.string().required('Email is required'),\n      password_confirmation: Yup.string().required('Password is required')\n    } : {\n      username: Yup.string().required('Username is required'),\n      password: Yup.string().required('Password is required'),\n      email: Yup.string().required('Email is required'),\n      password_confirmation: Yup.string().required('Password is required'),\n      phone: Yup.string().required('Phone is required')\n    }),\n    onSubmit: function onSubmit(_ref, _ref2) {\n      var username = _ref.username,\n          email = _ref.email,\n          password = _ref.password,\n          password_confirmation = _ref.password_confirmation;\n      var setStatus = _ref2.setStatus,\n          setSubmitting = _ref2.setSubmitting;\n      setStatus();\n\n      if (formUser) {\n        console.log(formUser);\n        authenticationService.registrationClient(username, password, email, password_confirmation).then(function (user) {\n          console.log('user:', user);\n          var _from = // this.props.location.state ||\n          {\n            from: {\n              pathname: \"/\"\n            }\n          },\n              from = _from.from;\n          router.push(from);\n        }, function (error) {\n          console.log('error:', error);\n          setSubmitting(false);\n          setStatus(error);\n        });\n      } else {\n        console.log(formUser);\n        authenticationService.registrationProvider(username, password, email, password_confirmation, phone).then(function (user) {\n          console.log('user:', user);\n          var _from2 = // this.props.location.state ||\n          {\n            from: {\n              pathname: \"/\"\n            }\n          },\n              from = _from2.from;\n          router.push(from);\n        }, function (error) {\n          console.log('error:', error);\n          setSubmitting(false);\n          setStatus(error);\n        });\n      }\n    },\n    render: function render(_ref3) {\n      var errors = _ref3.errors,\n          status = _ref3.status,\n          touched = _ref3.touched,\n          isSubmitting = _ref3.isSubmitting;\n      return __jsx(Form, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }\n      }, __jsx(\"div\", {\n        className: \"\".concat(s.role_toggler),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }\n      }, formUser ? __jsx(\"span\", {\n        className: \"\".concat(s.user),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 27\n        }\n      }, \"as User\") : __jsx(\"span\", {\n        className: \"\".concat(s.model),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 74\n        }\n      }, \"as Model\"), __jsx(\"label\", {\n        className: s[\"switch\"],\n        htmlFor: \"checkbox\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }\n      }, __jsx(\"input\", {\n        type: \"checkbox\",\n        id: \"checkbox\",\n        onChange: function onChange() {\n          return setFormUser(!formUser);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }\n      }), __jsx(\"div\", {\n        className: \"\".concat(s.slider, \" \").concat(s.round),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }\n      }))), __jsx(\"div\", {\n        className: \"form-group\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }\n      }, __jsx(\"label\", {\n        htmlFor: \"username\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }\n      }, \"Username\"), __jsx(Field, {\n        name: \"username\",\n        type: \"text\",\n        className: 'form-control' + (errors.username && touched.username ? ' is-invalid' : ''),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }\n      }), __jsx(ErrorMessage, {\n        name: \"username\",\n        component: \"div\",\n        className: \"invalid-feedback\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }\n      })), __jsx(\"div\", {\n        className: \"form-group\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }\n      }, __jsx(\"label\", {\n        htmlFor: \"email\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }\n      }, \"Email\"), __jsx(Field, {\n        name: \"email\",\n        type: \"email\",\n        className: 'form-control' + (errors.email && touched.email ? ' is-invalid' : ''),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }\n      }), __jsx(ErrorMessage, {\n        name: \"email\",\n        component: \"div\",\n        className: \"invalid-feedback\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }\n      })), __jsx(\"div\", {\n        className: \"form-group\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }\n      }, __jsx(\"label\", {\n        htmlFor: \"password\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }\n      }, \"Password\"), __jsx(Field, {\n        name: \"password\",\n        type: \"password\",\n        className: 'form-control' + (errors.password && touched.password ? ' is-invalid' : ''),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }\n      }), __jsx(ErrorMessage, {\n        name: \"password\",\n        component: \"div\",\n        className: \"invalid-feedback\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 15\n        }\n      })), __jsx(\"div\", {\n        className: \"form-group\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }\n      }, __jsx(\"label\", {\n        htmlFor: \"password_confirmation\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }\n      }, \"Confirm password\"), __jsx(Field, {\n        name: \"password_confirmation\",\n        type: \"password\",\n        className: 'form-control' + (errors.password_confirmation && touched.password_confirmation ? ' is-invalid' : ''),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }\n      }), __jsx(ErrorMessage, {\n        name: \"password_confirmation\",\n        component: \"div\",\n        className: \"invalid-feedback\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }\n      })), !formUser && __jsx(\"div\", {\n        className: \"form-group\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 27\n        }\n      }, __jsx(\"label\", {\n        htmlFor: \"phone\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }\n      }, \"Phone\"), __jsx(Field, {\n        name: \"phone\",\n        type: \"number\",\n        className: 'form-control',\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }\n      })), __jsx(\"div\", {\n        className: \"form-group\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }\n      }, __jsx(\"button\", {\n        type: \"submit\",\n        className: \"btn \".concat(s.submit_btn),\n        disabled: isSubmitting,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }\n      }, \"Submit\"), isSubmitting && __jsx(\"div\", {\n        className: \"spinner-border spinner-border-sm text-primary ml-3\",\n        role: \"status\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }\n      }, __jsx(\"span\", {\n        className: \"sr-only\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 19\n        }\n      }, \"Loading...\"))), status && __jsx(\"div\", {\n        className: 'alert alert-danger',\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 15\n        }\n      }, JSON.stringify(status), console.log(status)));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(SignUp, \"JsAB+7/ze20qrPGTCE6/8Nm74hs=\", false, function () {\n  return [useRouter];\n});\n\n_c = SignUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUp\");","map":{"version":3,"sources":["C:/Users/user/projects/vibe/src/components/login-page/SignUp.jsx"],"names":["React","useState","s","Formik","Field","Form","ErrorMessage","Yup","useRouter","authenticationService","SignUp","router","formUser","setFormUser","login_page_form","username","email","password","password_confirmation","phone","object","shape","string","required","setStatus","setSubmitting","console","log","registrationClient","then","user","from","pathname","push","error","registrationProvider","errors","status","touched","isSubmitting","role_toggler","model","slider","round","submit_btn","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport s from './login.module.scss';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useRouter } from 'next/router';\r\nimport { authenticationService } from '../../_services';\r\n\r\nexport default function SignUp() {\r\n  const router = useRouter();\r\n  const [formUser, setFormUser] = useState(true);\r\n\r\n  return (\r\n    <div className={s.login_page_form}>\r\n      <h2>Registration</h2>\r\n      <Formik\r\n        initialValues={{\r\n          username: '',\r\n          email: '',\r\n          password: '',\r\n          password_confirmation: '',\r\n          phone: ''\r\n        }}\r\n        validationSchema={Yup.object().shape(formUser\r\n          ? {\r\n            username: Yup.string().required('Username is required'),\r\n            password: Yup.string().required('Password is required'),\r\n            email: Yup.string().required('Email is required'),\r\n            password_confirmation: Yup.string().required('Password is required')\r\n          }\r\n          : {\r\n            username: Yup.string().required('Username is required'),\r\n            password: Yup.string().required('Password is required'),\r\n            email: Yup.string().required('Email is required'),\r\n            password_confirmation: Yup.string().required('Password is required'),\r\n            phone: Yup.string().required('Phone is required')\r\n          })}\r\n        onSubmit={({ username, email, password, password_confirmation }, { setStatus, setSubmitting }) => {\r\n          setStatus();\r\n          if (formUser) {\r\n            console.log(formUser);\r\n            \r\n            authenticationService.registrationClient(username, password, email, password_confirmation)\r\n              .then(\r\n                user => {\r\n                  console.log('user:', user);\r\n                  const { from } =\r\n                    // this.props.location.state ||\r\n                    { from: { pathname: \"/\" } };\r\n                  router.push(from);\r\n                },\r\n                error => {\r\n                  console.log('error:', error);\r\n                  setSubmitting(false);\r\n                  setStatus(error);\r\n                }\r\n              );\r\n          } else {\r\n            console.log(formUser);\r\n\r\n            authenticationService.registrationProvider(username, password, email, password_confirmation, phone)\r\n              .then(\r\n                user => {\r\n                  console.log('user:', user);\r\n                  const { from } =\r\n                    // this.props.location.state ||\r\n                    { from: { pathname: \"/\" } };\r\n                  router.push(from);\r\n                },\r\n                error => {\r\n                  console.log('error:', error);\r\n                  setSubmitting(false);\r\n                  setStatus(error);\r\n                }\r\n              );\r\n          }\r\n        }}\r\n        render={({ errors, status, touched, isSubmitting }) => (\r\n          <Form>\r\n            <div className={`${s.role_toggler}`}>\r\n              {formUser ? <span className={`${s.user}`}>as User</span> : <span className={`${s.model}`}>as Model</span>}\r\n              <label className={s.switch} htmlFor=\"checkbox\">\r\n                <input type=\"checkbox\" id=\"checkbox\" onChange={() => setFormUser(!formUser)} />\r\n                <div className={`${s.slider} ${s.round}`} />\r\n              </label>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"username\">Username</label>\r\n              <Field name=\"username\" type=\"text\" className={'form-control' + (errors.username && touched.username ? ' is-invalid' : '')} />\r\n              <ErrorMessage name=\"username\" component=\"div\" className=\"invalid-feedback\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"email\">Email</label>\r\n              <Field name=\"email\" type=\"email\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\r\n              <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"password\">Password</label>\r\n              <Field name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\r\n              <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"password_confirmation\">Confirm password</label>\r\n              <Field name=\"password_confirmation\" type=\"password\" className={'form-control' + (errors.password_confirmation && touched.password_confirmation ? ' is-invalid' : '')} />\r\n              <ErrorMessage name=\"password_confirmation\" component=\"div\" className=\"invalid-feedback\" />\r\n            </div>\r\n            {!formUser && <div className=\"form-group\">\r\n              <label htmlFor=\"phone\">Phone</label>\r\n              <Field name=\"phone\" type=\"number\" className={'form-control'} />\r\n            </div>}\r\n            <div className=\"form-group\">\r\n              <button type=\"submit\" className={`btn ${s.submit_btn}`} disabled={isSubmitting}>Submit</button>\r\n              {isSubmitting &&\r\n                <div className=\"spinner-border spinner-border-sm text-primary ml-3\" role=\"status\">\r\n                  <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n              }\r\n            </div>\r\n            {status &&\r\n              <div className={'alert alert-danger'}>{JSON.stringify(status)}{console.log(status)}</div>\r\n            }\r\n          </Form>\r\n        )}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}