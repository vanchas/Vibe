{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ADD_POST, REMOVE_POST, UPDATE_POST } from \"../actions/types\";\nconst initialState = {\n  providerPosts: []\n};\nexport const providerReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        providerPosts: state.providerPosts.concat(action.payload)\n      });\n\n    case REMOVE_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        providerPosts: action.payload\n      });\n\n    case UPDATE_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        providerPosts: action.payload\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/dev-2/WebstormProjects/vibe/src/redux/reducers/providerReducer.ts"],"names":["ADD_POST","REMOVE_POST","UPDATE_POST","initialState","providerPosts","providerReducer","state","action","type","concat","payload"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,WAAhC,QAAmD,kBAAnD;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,aAAa,EAAE;AADI,CAArB;AAIA,OAAO,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAuC;AACpE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,QAAL;AACE,6CAAYM,KAAZ;AAAmBF,QAAAA,aAAa,EAAEE,KAAK,CAACF,aAAN,CAAoBK,MAApB,CAA2BF,MAAM,CAACG,OAAlC;AAAlC;;AAEF,SAAKT,WAAL;AACE,6CAAYK,KAAZ;AAAmBF,QAAAA,aAAa,EAAEG,MAAM,CAACG;AAAzC;;AAEF,SAAKR,WAAL;AACE,6CAAYI,KAAZ;AAAmBF,QAAAA,aAAa,EAAEG,MAAM,CAACG;AAAzC;;AAEF;AACE,aAAOJ,KAAP;AAXJ;AAaD,CAdM","sourcesContent":["import { ADD_POST, REMOVE_POST, UPDATE_POST } from \"../actions/types\";\n\nconst initialState = {\n  providerPosts: []\n};\n\nexport const providerReducer = (state = initialState, action: any) => {\n  switch (action.type) {\n    case ADD_POST:\n      return { ...state, providerPosts: state.providerPosts.concat(action.payload) }\n\n    case REMOVE_POST:\n      return { ...state, providerPosts: action.payload }\n\n    case UPDATE_POST:\n      return { ...state, providerPosts: action.payload }\n\n    default:\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}