{"ast":null,"code":"var __jsx = React.createElement;\nimport App from 'next/app';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport './styles/app.scss';\nimport Layout from '../components/Layout';\nimport withRedux from \"next-redux-wrapper\";\nimport store from '../redux/store.ts';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { configureFakeBackend } from '../_helpers'; // import Cookies from 'js-cookie';\n// import 'stream-chat-react/dist/css/index.css';\n// import InstallPWA from '../components/pwa';\n// import PWAPrompt from 'react-ios-pwa-prompt';\n\nclass MyApp extends App {\n  static async getInitialProps(props) {\n    const pageProps = props.Component.getInitialProps ? await props.Component.getInitialProps(props.ctx) : {};\n    return {\n      pageProps: pageProps\n    };\n  }\n\n  componentDidMount() {\n    configureFakeBackend();\n  }\n\n  componentWillUnmount() {// Cookies.remove('currentUser');\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      store\n    } = this.props;\n    return __jsx(Provider, {\n      store: store\n    }, __jsx(Layout, null, __jsx(Component, pageProps)));\n  }\n\n} //makeStore function that returns a new store for every request\n\n\nconst makeStore = () => store; //withRedux wrapper that passes the store to the App Component\n\n\nexport default withRedux(makeStore)(MyApp);","map":null,"metadata":{},"sourceType":"module"}