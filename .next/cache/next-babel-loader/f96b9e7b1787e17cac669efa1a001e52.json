{"ast":null,"code":"import { Role } from './';\nexport function configureFakeBackend() {\n  let users = [{\n    id: 1,\n    username: 'admin',\n    password: 'admin',\n    firstName: 'Admin',\n    lastName: 'Admin',\n    role: Role.Admin,\n    name: \"Admin\",\n    second_name: null,\n    email: null,\n    phone: \"380953444348\"\n  }, {\n    id: 2,\n    username: 'user',\n    password: 'user',\n    firstName: 'Ivan',\n    lastName: 'User',\n    role: Role.Admin,\n    name: \"User\",\n    second_name: null,\n    email: null,\n    phone: \"380953444348\"\n  },, {\n    id: 3,\n    username: 'pro',\n    password: 'pro',\n    firstName: 'Model',\n    lastName: 'Provider',\n    role: Role.Provider,\n    name: \"Model\",\n    second_name: null,\n    email: null,\n    phone: \"380953444348\"\n  }];\n  let realFetch = window.fetch;\n\n  window.fetch = function (url, opts) {\n    const authHeader = opts.headers['Authorization'];\n    const isLoggedIn = authHeader && authHeader.startsWith('Bearer fake-jwt-token');\n    const roleString = isLoggedIn && authHeader.split('.')[1];\n    const role = roleString ? Role[roleString] : null;\n    return new Promise((resolve, reject) => {\n      // wrap in timeout to simulate server api call\n      setTimeout(() => {\n        // authenticate - public\n        if (url.endsWith('/api/auth/login') && opts.method === 'POST') {\n          const params = JSON.parse(opts.body); // debugger;\n          // const user = users.find(x => x.username === params.username && x.password === params.password);\n\n          let user;\n          users.forEach(u => {\n            if (u.password === params.password && u.username === params.username) return user = u;\n            setTimeout(() => {\n              console.log(user);\n            }, 0);\n          });\n          if (!user) return error('Username or password is incorrect');\n          return ok({\n            id: user.id,\n            username: user.username,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            role: user.role,\n            token: `fake-jwt-token.${user.role}`,\n            name: user.name,\n            second_name: user.second_name,\n            email: user.email,\n            phone: user.phone\n          });\n        }\n\n        if (url.endsWith('/api/auth/register') && opts.method === 'POST') {\n          const params = JSON.parse(opts.body);\n          const user = {\n            id: users.length + 1,\n            username: params.username,\n            password: params.password,\n            firstName: 'Normal',\n            lastName: Role.User,\n            name: null,\n            second_name: null,\n            email: null,\n            phone: null\n          };\n          users.push(user);\n          return ok({\n            id: user.id,\n            username: user.username,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            role: user.role,\n            token: `fake-jwt-token.${user.role}`,\n            name: user.name,\n            second_name: user.second_name,\n            email: user.email,\n            phone: user.phone\n          });\n        } // get user by id - admin or user (user can only access their own record)\n\n\n        if (url.match(/\\/users\\/\\d+$/) && opts.method === 'GET') {\n          if (!isLoggedIn) return unauthorised(); // get id from request url\n\n          let urlParts = url.split('/');\n          let id = parseInt(urlParts[urlParts.length - 1]); // only allow normal users access to their own record\n\n          const currentUser = users.find(x => x.role === role);\n          if (id !== currentUser.id && role !== Role.Admin) return unauthorised();\n          const user = users.find(x => x.id === id);\n          return ok(user);\n        } // get all users - admin only\n\n\n        if (url.endsWith('/users') && opts.method === 'GET') {\n          if (role !== Role.Admin) return unauthorised();\n          return ok(users);\n        } // pass through any requests not handled above\n\n\n        realFetch(url, opts).then(response => resolve(response)); // private helper functions\n\n        function ok(body) {\n          resolve({\n            ok: true,\n            text: () => Promise.resolve(JSON.stringify(body))\n          });\n        }\n\n        function unauthorised() {\n          resolve({\n            status: 401,\n            text: () => Promise.resolve(JSON.stringify({\n              message: 'Unauthorised'\n            }))\n          });\n        }\n\n        function error(message) {\n          resolve({\n            status: 400,\n            text: () => Promise.resolve(JSON.stringify({\n              message\n            }))\n          });\n        }\n      }, 500);\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/user/projects/vibe/src/_helpers/fake-backend.js"],"names":["Role","configureFakeBackend","users","id","username","password","firstName","lastName","role","Admin","name","second_name","email","phone","Provider","realFetch","window","fetch","url","opts","authHeader","headers","isLoggedIn","startsWith","roleString","split","Promise","resolve","reject","setTimeout","endsWith","method","params","JSON","parse","body","user","forEach","u","console","log","error","ok","token","length","User","push","match","unauthorised","urlParts","parseInt","currentUser","find","x","then","response","text","stringify","status","message"],"mappings":"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","sourcesContent":["import { Role } from './'\r\n\r\nexport function configureFakeBackend() {\r\n  let users = [\r\n    {\r\n      id: 1,\r\n      username: 'admin',\r\n      password: 'admin',\r\n      firstName: 'Admin',\r\n      lastName: 'Admin',\r\n      role: Role.Admin,\r\n      name: \"Admin\",\r\n      second_name: null,\r\n      email: null,\r\n      phone: \"380953444348\",\r\n    },\r\n    {\r\n      id: 2,\r\n      username: 'user',\r\n      password: 'user',\r\n      firstName: 'Ivan',\r\n      lastName: 'User',\r\n      role: Role.Admin,\r\n      name: \"User\",\r\n      second_name: null,\r\n      email: null,\r\n      phone: \"380953444348\",\r\n    },\r\n    ,\r\n    {\r\n      id: 3,\r\n      username: 'pro',\r\n      password: 'pro',\r\n      firstName: 'Model',\r\n      lastName: 'Provider',\r\n      role: Role.Provider,\r\n      name: \"Model\",\r\n      second_name: null,\r\n      email: null,\r\n      phone: \"380953444348\"\r\n    }\r\n  ];\r\n\r\n  let realFetch = window.fetch;\r\n  window.fetch = function (url, opts) {\r\n    const authHeader = opts.headers['Authorization'];\r\n    const isLoggedIn = authHeader && authHeader.startsWith('Bearer fake-jwt-token');\r\n    const roleString = isLoggedIn && authHeader.split('.')[1];\r\n    const role = roleString ? Role[roleString] : null;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      // wrap in timeout to simulate server api call\r\n      setTimeout(() => {\r\n        // authenticate - public\r\n        if (url.endsWith('/api/auth/login') && opts.method === 'POST') {\r\n          const params = JSON.parse(opts.body);\r\n          // debugger;\r\n          // const user = users.find(x => x.username === params.username && x.password === params.password);\r\n          let user;\r\n          users.forEach(u => {\r\n            if (u.password === params.password && u.username === params.username) return user = u;\r\n            setTimeout(() => {\r\n              console.log(user);\r\n              \r\n            }, 0);\r\n          });\r\n          if (!user) return error('Username or password is incorrect');\r\n          return ok({\r\n            id: user.id,\r\n            username: user.username,\r\n            firstName: user.firstName,\r\n            lastName: user.lastName,\r\n            role: user.role,\r\n            token: `fake-jwt-token.${user.role}`,\r\n            name: user.name,\r\n            second_name: user.second_name,\r\n            email: user.email,\r\n            phone: user.phone\r\n          });\r\n        }\r\n\r\n        if (url.endsWith('/api/auth/register') && opts.method === 'POST') {\r\n          const params = JSON.parse(opts.body);\r\n          const user = {\r\n            id: users.length + 1,\r\n            username: params.username,\r\n            password: params.password,\r\n            firstName: 'Normal',\r\n            lastName: Role.User,\r\n            name: null,\r\n            second_name: null,\r\n            email: null,\r\n            phone: null\r\n          };\r\n          users.push(user);\r\n\r\n          return ok({\r\n            id: user.id,\r\n            username: user.username,\r\n            firstName: user.firstName,\r\n            lastName: user.lastName,\r\n            role: user.role,\r\n            token: `fake-jwt-token.${user.role}`,\r\n            name: user.name,\r\n            second_name: user.second_name,\r\n            email: user.email,\r\n            phone: user.phone\r\n          });\r\n        }\r\n\r\n        // get user by id - admin or user (user can only access their own record)\r\n        if (url.match(/\\/users\\/\\d+$/) && opts.method === 'GET') {\r\n          if (!isLoggedIn) return unauthorised();\r\n\r\n          // get id from request url\r\n          let urlParts = url.split('/');\r\n          let id = parseInt(urlParts[urlParts.length - 1]);\r\n\r\n          // only allow normal users access to their own record\r\n          const currentUser = users.find(x => x.role === role);\r\n          if (id !== currentUser.id && role !== Role.Admin) return unauthorised();\r\n\r\n          const user = users.find(x => x.id === id);\r\n          return ok(user);\r\n        }\r\n\r\n        // get all users - admin only\r\n        if (url.endsWith('/users') && opts.method === 'GET') {\r\n          if (role !== Role.Admin) return unauthorised();\r\n          return ok(users);\r\n        }\r\n\r\n        // pass through any requests not handled above\r\n        realFetch(url, opts).then(response => resolve(response));\r\n\r\n        // private helper functions\r\n\r\n        function ok(body) {\r\n          resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(body)) })\r\n        }\r\n\r\n        function unauthorised() {\r\n          resolve({ status: 401, text: () => Promise.resolve(JSON.stringify({ message: 'Unauthorised' })) })\r\n        }\r\n\r\n        function error(message) {\r\n          resolve({ status: 400, text: () => Promise.resolve(JSON.stringify({ message })) })\r\n        }\r\n      }, 500);\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}