{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SHOW_LOADER, HIDE_LOADER, SHOW_ALERT, HIDE_ALERT, GET_ALL_POSTS, GET_LOCAITONS_INFO, GET_CITIES, CREATE_SUPPORT_TASK, GET_ALL_USER_TASKS, GET_APP_INFO, GET_NEW_POSTS, GET_PAGES_NUMBER, GET_POST_COMMENTS, CREATE_POST_COMMENT, FILTER_POSTS, GET_FAVORITES, GET_COMPLAINS, SORT_POSTS } from \"../actions/types\";\nconst initialState = {\n  postComments: [],\n  loading: false,\n  alert: null,\n  categories: [],\n  posts: [],\n  newPosts: [],\n  states: [],\n  cities: [],\n  supportTasks: [],\n  affiliation: [],\n  availability: [],\n  available_to: [],\n  ethnicity: [],\n  eyes: [],\n  hair: [],\n  pagesNumber: 0,\n  favorites: [],\n  complains: []\n};\nexport const appReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SHOW_LOADER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true\n      });\n\n    case HIDE_LOADER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false\n      });\n\n    case SHOW_ALERT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        alert: action.payload\n      });\n\n    case HIDE_ALERT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        alert: null\n      });\n\n    case GET_ALL_POSTS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        posts: action.payload\n      });\n\n    case SORT_POSTS:\n      let newPosts = state.posts; // console.log(newPosts);\n\n      if (action.payload === 'date/-') {\n        newPosts.sort((a, b) => {\n          const dateA = new Date(a.created_at.split('T')[0].split('-').join('/'));\n          const dateB = new Date(b.created_at.split('T')[0].split('-').join('/'));\n          console.log(dateA.getTime(), dateB.getTime()); // if (dateA > dateB) {\n          //   console.log('>');\n          // } else if (dateA < dateB) {\n          //   console.log('<');\n          // }\n        });\n      }\n\n      setTimeout(() => {// console.log(newPosts);\n      }, 1000);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        posts: newPosts\n      });\n\n    case FILTER_POSTS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        posts: action.payload\n      });\n    // case SORT_POSTS:\n    //   console.log(action);\n    //   let newPosts = state.posts;\n    //   console.log(newPosts);\n    //   if (action.payload === 'date/-') {\n    //     newPosts.sort((a: any, b: any) => {\n    //       const dateA = a.created_at.split('T')[0];\n    //       const dateB = b.created_at.split('T')[0];\n    //       if (moment(dateA).isBefore(dateB)) {\n    //         return b - a;\n    //       }\n    //     });\n    //   }\n    //   setTimeout(() => {\n    //     console.log(newPosts);\n    //   }, 1000);\n    //   return { ...state, posts: null }\n\n    case GET_PAGES_NUMBER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        pagesNumber: action.payload\n      });\n\n    case GET_NEW_POSTS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        newPosts: action.payload\n      });\n\n    case GET_LOCAITONS_INFO:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        states: action.payload\n      });\n\n    case GET_CITIES:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cities: action.payload\n      });\n\n    case GET_COMPLAINS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complains: action.payload\n      });\n\n    case GET_FAVORITES:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        favorites: action.payload\n      });\n\n    case CREATE_SUPPORT_TASK:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        supportTasks: [...state.supportTasks, action.payload]\n      });\n\n    case GET_ALL_USER_TASKS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        supportTasks: action.payload\n      });\n\n    case GET_POST_COMMENTS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        postComments: action.payload\n      });\n\n    case CREATE_POST_COMMENT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        postComments: [...state.postComments, action.payload]\n      });\n\n    case GET_APP_INFO:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        categories: action.payload.categories,\n        affiliation: action.payload.affiliation,\n        availability: action.payload.availability,\n        available_to: action.payload.available_to,\n        ethnicity: action.payload.ethnicity,\n        eyes: action.payload.eyes,\n        hair: action.payload.hair\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/user/projects/vibe/src/redux/reducers/appReducer.ts"],"names":["SHOW_LOADER","HIDE_LOADER","SHOW_ALERT","HIDE_ALERT","GET_ALL_POSTS","GET_LOCAITONS_INFO","GET_CITIES","CREATE_SUPPORT_TASK","GET_ALL_USER_TASKS","GET_APP_INFO","GET_NEW_POSTS","GET_PAGES_NUMBER","GET_POST_COMMENTS","CREATE_POST_COMMENT","FILTER_POSTS","GET_FAVORITES","GET_COMPLAINS","SORT_POSTS","initialState","postComments","loading","alert","categories","posts","newPosts","states","cities","supportTasks","affiliation","availability","available_to","ethnicity","eyes","hair","pagesNumber","favorites","complains","appReducer","state","action","type","payload","sort","a","b","dateA","Date","created_at","split","join","dateB","console","log","getTime","setTimeout"],"mappings":"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","sourcesContent":["import { SHOW_LOADER, HIDE_LOADER, SHOW_ALERT, HIDE_ALERT, GET_ALL_POSTS, GET_LOCAITONS_INFO, GET_CITIES, CREATE_SUPPORT_TASK, GET_ALL_USER_TASKS, GET_APP_INFO, GET_NEW_POSTS, GET_PAGES_NUMBER, GET_POST_COMMENTS, CREATE_POST_COMMENT, FILTER_POSTS, GET_FAVORITES, GET_COMPLAINS, SORT_POSTS } from \"../actions/types\";\r\nimport moment from 'moment'\r\n\r\nconst initialState = {\r\n  postComments: [],\r\n  loading: false,\r\n  alert: null,\r\n  categories: [],\r\n  posts: [],\r\n  newPosts: [],\r\n  states: [],\r\n  cities: [],\r\n  supportTasks: [],\r\n  affiliation: [],\r\n  availability: [],\r\n  available_to: [],\r\n  ethnicity: [],\r\n  eyes: [],\r\n  hair: [],\r\n  pagesNumber: 0,\r\n  favorites: [],\r\n  complains: []\r\n};\r\n\r\nexport const appReducer = (state: any = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case SHOW_LOADER:\r\n      return { ...state, loading: true }\r\n\r\n    case HIDE_LOADER:\r\n      return { ...state, loading: false }\r\n\r\n    case SHOW_ALERT:\r\n      return { ...state, alert: action.payload }\r\n\r\n    case HIDE_ALERT:\r\n      return { ...state, alert: null }\r\n\r\n    case GET_ALL_POSTS:\r\n      return { ...state, posts: action.payload }\r\n\r\n    case SORT_POSTS:\r\n      let newPosts = state.posts;\r\n      // console.log(newPosts);\r\n      if (action.payload === 'date/-') {\r\n        newPosts.sort((a: any, b: any) => {\r\n          const dateA = new Date(a.created_at.split('T')[0].split('-').join('/'));\r\n          const dateB = new Date(b.created_at.split('T')[0].split('-').join('/'));\r\n          console.log(dateA.getTime(), dateB.getTime());\r\n          \r\n          // if (dateA > dateB) {\r\n          //   console.log('>');\r\n          // } else if (dateA < dateB) {\r\n          //   console.log('<');\r\n          // }\r\n        });\r\n      }\r\n      setTimeout(() => {\r\n        // console.log(newPosts);\r\n      }, 1000);\r\n      return { ...state, posts: newPosts }\r\n\r\n    case FILTER_POSTS:\r\n      return { ...state, posts: action.payload }\r\n\r\n    // case SORT_POSTS:\r\n    //   console.log(action);\r\n\r\n    //   let newPosts = state.posts;\r\n    //   console.log(newPosts);\r\n    //   if (action.payload === 'date/-') {\r\n    //     newPosts.sort((a: any, b: any) => {\r\n    //       const dateA = a.created_at.split('T')[0];\r\n    //       const dateB = b.created_at.split('T')[0];\r\n    //       if (moment(dateA).isBefore(dateB)) {\r\n    //         return b - a;\r\n    //       }\r\n    //     });\r\n    //   }\r\n    //   setTimeout(() => {\r\n    //     console.log(newPosts);\r\n    //   }, 1000);\r\n    //   return { ...state, posts: null }\r\n\r\n    case GET_PAGES_NUMBER:\r\n      return { ...state, pagesNumber: action.payload }\r\n\r\n    case GET_NEW_POSTS:\r\n      return { ...state, newPosts: action.payload }\r\n\r\n    case GET_LOCAITONS_INFO:\r\n      return { ...state, states: action.payload }\r\n\r\n    case GET_CITIES:\r\n      return { ...state, cities: action.payload }\r\n\r\n    case GET_COMPLAINS:\r\n      return { ...state, complains: action.payload }\r\n\r\n    case GET_FAVORITES:\r\n      return { ...state, favorites: action.payload }\r\n\r\n    case CREATE_SUPPORT_TASK:\r\n      return { ...state, supportTasks: [...state.supportTasks, action.payload] }\r\n\r\n    case GET_ALL_USER_TASKS:\r\n      return { ...state, supportTasks: action.payload }\r\n\r\n    case GET_POST_COMMENTS:\r\n      return { ...state, postComments: action.payload }\r\n\r\n    case CREATE_POST_COMMENT:\r\n      return { ...state, postComments: [...state.postComments, action.payload] }\r\n\r\n    case GET_APP_INFO:\r\n      return {\r\n        ...state,\r\n        categories: action.payload.categories,\r\n        affiliation: action.payload.affiliation,\r\n        availability: action.payload.availability,\r\n        available_to: action.payload.available_to,\r\n        ethnicity: action.payload.ethnicity,\r\n        eyes: action.payload.eyes,\r\n        hair: action.payload.hair\r\n      }\r\n\r\n    default: return state;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}