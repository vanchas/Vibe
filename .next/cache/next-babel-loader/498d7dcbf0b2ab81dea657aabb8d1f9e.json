{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { DECREMENT_COUNTER, INCREMENT_COUNTER } from '../actions/types';\nvar initialState = {\n  value: 0\n};\n\nvar counterReducer = function counterReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case INCREMENT_COUNTER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        value: state.value + 1\n      });\n\n    case DECREMENT_COUNTER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        value: state.value - 1\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport default counterReducer;","map":{"version":3,"sources":["C:/Users/user/projects/vibe/src/redux/reducers/counterReducer.ts"],"names":["DECREMENT_COUNTER","INCREMENT_COUNTER","initialState","value","counterReducer","state","action","type"],"mappings":";;;;;;AAAA,SAASA,iBAAT,EAA4BC,iBAA5B,QAAqD,kBAArD;AAOA,IAAMC,YAA0B,GAAG;AAC/BC,EAAAA,KAAK,EAAE;AADwB,CAAnC;;AAIA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAGJ;AAAA,MAFfC,KAEe,uEAFPH,YAEO;AAAA,MADfI,MACe;;AAEf,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,iBAAL;AACI,6CAAYI,KAAZ;AAAmBF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AAAxC;;AACJ,SAAKH,iBAAL;AACI,6CAAYK,KAAZ;AAAmBF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AAAxC;;AACJ;AACI,+BAAYE,KAAZ;AANR;AAQH,CAbD;;AAeA,eAAeD,cAAf","sourcesContent":["import { DECREMENT_COUNTER, INCREMENT_COUNTER } from '../actions/types';\r\nimport { CounterActionTypes } from '../actions/types';\r\n\r\ninterface CounterState {\r\n    value: number\r\n}\r\n\r\nconst initialState: CounterState = {\r\n    value: 0\r\n}\r\n\r\nconst counterReducer = (\r\n    state = initialState,\r\n    action: CounterActionTypes\r\n): CounterState => {\r\n    \r\n    switch (action.type) {\r\n        case INCREMENT_COUNTER:\r\n            return { ...state, value: state.value + 1 };\r\n        case DECREMENT_COUNTER:\r\n            return { ...state, value: state.value - 1 };\r\n        default:\r\n            return { ...state };\r\n    }\r\n};\r\n\r\nexport default counterReducer;\r\n"]},"metadata":{},"sourceType":"module"}