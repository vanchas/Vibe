{"ast":null,"code":"import { Role } from './';\nexport function configureFakeBackend() {\n  let users = [{\n    id: 1,\n    username: 'admin',\n    password: 'admin',\n    firstName: 'Admin',\n    lastName: 'User',\n    role: Role.Admin,\n    name: \"Kirill\",\n    second_name: null,\n    email: null,\n    phone: \"380953444348\",\n    rating: null,\n    position: null,\n    telegram: null,\n    viber: null,\n    whatsapp: null,\n    site: null,\n    avatar: null,\n    email_verified_at: null,\n    activate: 1,\n    bx_id: 26,\n    created_at: \"2020-04-28T08:28:16.000000Z\",\n    updated_at: \"2020-04-28T08:28:34.000000Z\",\n    deleted_at: null,\n    chats: [{\n      desire: {\n        id: 1,\n        title: 'Desire title first'\n      },\n      companion: {\n        id: 3,\n        name: 'John'\n      },\n      messages: [{\n        sender: 'John',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum dolor sit amet'\n      }, {\n        sender: 'Admin',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum dolor sit amet ipsum dolor sit amet'\n      }, {\n        sender: 'John',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum ipsum dolor dolor sit amet'\n      }, {\n        sender: 'Admin',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum amet'\n      }]\n    }, {\n      desire: {\n        id: 2,\n        title: 'Desire title first'\n      },\n      companion: {\n        id: 2,\n        name: 'Ivan'\n      },\n      messages: [{\n        sender: 'Admin',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum dolor sit amet'\n      }, {\n        sender: 'Ivan',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum dolor sit amet ipsum dolor sit amet'\n      }, {\n        sender: 'Admin',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum ipsum dolor dolor sit amet'\n      }, {\n        sender: 'Ivan',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum amet'\n      }]\n    }]\n  }, {\n    id: 2,\n    username: 'user',\n    password: 'user',\n    firstName: 'Ivan',\n    lastName: 'User',\n    role: Role.Admin,\n    name: \"Kirill\",\n    second_name: null,\n    email: null,\n    phone: \"380953444348\",\n    rating: null,\n    position: null,\n    telegram: null,\n    viber: null,\n    whatsapp: null,\n    site: null,\n    avatar: null,\n    email_verified_at: null,\n    activate: 1,\n    bx_id: 26,\n    created_at: \"2020-04-28T08:28:16.000000Z\",\n    updated_at: \"2020-04-28T08:28:34.000000Z\",\n    deleted_at: null,\n    chats: [{\n      desire: {\n        id: 3,\n        title: 'Desire title first'\n      },\n      companion: {\n        id: 1,\n        name: 'Admin'\n      },\n      messages: [{\n        sender: 'Ivan',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum dolor sit amet'\n      }, {\n        sender: 'Admin',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum dolor sit amet ipsum dolor sit amet'\n      }, {\n        sender: 'Ivan',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum ipsum dolor dolor sit amet'\n      }, {\n        sender: 'Admin',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum amet'\n      }]\n    }]\n  },, {\n    id: 3,\n    username: 'user',\n    password: 'user',\n    firstName: 'John',\n    lastName: 'User',\n    role: Role.User,\n    name: \"John\",\n    second_name: null,\n    email: null,\n    phone: \"380953444348\",\n    rating: null,\n    position: null,\n    telegram: null,\n    viber: null,\n    whatsapp: null,\n    site: null,\n    avatar: null,\n    email_verified_at: null,\n    activate: 1,\n    bx_id: 26,\n    created_at: \"2020-04-28T08:28:16.000000Z\",\n    updated_at: \"2020-04-28T08:28:34.000000Z\",\n    deleted_at: null,\n    chats: [{\n      desire: {\n        id: 1,\n        title: 'Desire title first'\n      },\n      companion: {\n        id: 1,\n        name: 'Admin'\n      },\n      messages: [{\n        sender: 'John',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum dolor sit amet'\n      }, {\n        sender: 'Admin',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum dolor sit amet ipsum dolor sit amet'\n      }, {\n        sender: 'John',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum ipsum dolor dolor sit amet'\n      }, {\n        sender: 'Admin',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum amet'\n      }]\n    }]\n  }];\n  let realFetch = window.fetch;\n\n  window.fetch = function (url, opts) {\n    const authHeader = opts.headers['Authorization'];\n    const isLoggedIn = authHeader && authHeader.startsWith('Bearer fake-jwt-token');\n    const roleString = isLoggedIn && authHeader.split('.')[1];\n    const role = roleString ? Role[roleString] : null;\n    return new Promise((resolve, reject) => {\n      // wrap in timeout to simulate server api call\n      setTimeout(() => {\n        // authenticate - public\n        if (url.endsWith('/api/auth/login') && opts.method === 'POST') {\n          const params = JSON.parse(opts.body);\n          const user = users.find(x => x.username === params.username && x.password === params.password);\n          if (!user) return error('Username or password is incorrect');\n          return ok({\n            id: user.id,\n            username: user.username,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            role: user.role,\n            token: `fake-jwt-token.${user.role}`,\n            name: user.name,\n            second_name: user.second_name,\n            email: user.email,\n            phone: user.phone,\n            rating: user.rating,\n            position: user.position,\n            telegram: user.telegram,\n            viber: user.viber,\n            whatsapp: user.whatsapp,\n            site: user.site,\n            avatar: user.avatar,\n            email_verified_at: user.email_verified_at,\n            activate: user.activate,\n            bx_id: user.bx_id,\n            created_at: user.created_at,\n            updated_at: user.updated_at,\n            deleted_at: user.deleted_at,\n            chats: user.chats\n          });\n        }\n\n        if (url.endsWith('/api/auth/register') && opts.method === 'POST') {\n          const params = JSON.parse(opts.body);\n          const user = {\n            id: users.length + 1,\n            username: params.username,\n            password: params.password,\n            firstName: 'Normal',\n            lastName: Role.User,\n            name: null,\n            second_name: null,\n            email: null,\n            phone: null,\n            rating: null,\n            position: null,\n            telegram: null,\n            viber: null,\n            whatsapp: null,\n            site: null,\n            avatar: null,\n            email_verified_at: null,\n            activate: null,\n            bx_id: null,\n            created_at: null,\n            updated_at: null,\n            deleted_at: null,\n            chats: null\n          };\n          users.push(user);\n          return ok({\n            id: user.id,\n            username: user.username,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            role: user.role,\n            token: `fake-jwt-token.${user.role}`,\n            name: user.name,\n            second_name: user.second_name,\n            email: user.email,\n            phone: user.phone,\n            rating: user.rating,\n            position: user.position,\n            telegram: user.telegram,\n            viber: user.viber,\n            whatsapp: user.whatsapp,\n            site: user.site,\n            avatar: user.avatar,\n            email_verified_at: user.email_verified_at,\n            activate: user.activate,\n            bx_id: user.bx_id,\n            created_at: user.created_at,\n            updated_at: user.updated_at,\n            deleted_at: user.deleted_at,\n            chats: user.chats\n          });\n        } // get user by id - admin or user (user can only access their own record)\n\n\n        if (url.match(/\\/users\\/\\d+$/) && opts.method === 'GET') {\n          if (!isLoggedIn) return unauthorised(); // get id from request url\n\n          let urlParts = url.split('/');\n          let id = parseInt(urlParts[urlParts.length - 1]); // only allow normal users access to their own record\n\n          const currentUser = users.find(x => x.role === role);\n          if (id !== currentUser.id && role !== Role.Admin) return unauthorised();\n          const user = users.find(x => x.id === id);\n          return ok(user);\n        } // get all users - admin only\n\n\n        if (url.endsWith('/users') && opts.method === 'GET') {\n          if (role !== Role.Admin) return unauthorised();\n          return ok(users);\n        } // pass through any requests not handled above\n\n\n        realFetch(url, opts).then(response => resolve(response)); // private helper functions\n\n        function ok(body) {\n          resolve({\n            ok: true,\n            text: () => Promise.resolve(JSON.stringify(body))\n          });\n        }\n\n        function unauthorised() {\n          resolve({\n            status: 401,\n            text: () => Promise.resolve(JSON.stringify({\n              message: 'Unauthorised'\n            }))\n          });\n        }\n\n        function error(message) {\n          resolve({\n            status: 400,\n            text: () => Promise.resolve(JSON.stringify({\n              message\n            }))\n          });\n        }\n      }, 500);\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/user/projects/vibe/src/_helpers/fake-backend.js"],"names":["Role","configureFakeBackend","users","id","username","password","firstName","lastName","role","Admin","name","second_name","email","phone","rating","position","telegram","viber","whatsapp","site","avatar","email_verified_at","activate","bx_id","created_at","updated_at","deleted_at","chats","desire","title","companion","messages","sender","Date","now","date","text","User","realFetch","window","fetch","url","opts","authHeader","headers","isLoggedIn","startsWith","roleString","split","Promise","resolve","reject","setTimeout","endsWith","method","params","JSON","parse","body","user","find","x","error","ok","token","length","push","match","unauthorised","urlParts","parseInt","currentUser","then","response","stringify","status","message"],"mappings":"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","sourcesContent":["import { Role } from './'\r\n\r\nexport function configureFakeBackend() {\r\n  let users = [\r\n    {\r\n      id: 1,\r\n      username: 'admin',\r\n      password: 'admin',\r\n      firstName: 'Admin',\r\n      lastName: 'User',\r\n      role: Role.Admin,\r\n      name: \"Kirill\",\r\n      second_name: null,\r\n      email: null,\r\n      phone: \"380953444348\",\r\n      rating: null,\r\n      position: null,\r\n      telegram: null,\r\n      viber: null,\r\n      whatsapp: null,\r\n      site: null,\r\n      avatar: null,\r\n      email_verified_at: null,\r\n      activate: 1,\r\n      bx_id: 26,\r\n      created_at: \"2020-04-28T08:28:16.000000Z\",\r\n      updated_at: \"2020-04-28T08:28:34.000000Z\",\r\n      deleted_at: null,\r\n      chats: [\r\n        {\r\n          desire: { id: 1, title: 'Desire title first' },\r\n          companion: { id: 3, name: 'John' },\r\n          messages: [\r\n            { sender: 'John', id: Date.now(), date: new Date(), text: 'lorem ipsum dolor sit amet' },\r\n            { sender: 'Admin', id: Date.now(), date: new Date(), text: 'lorem ipsum dolor sit amet ipsum dolor sit amet' },\r\n            { sender: 'John', id: Date.now(), date: new Date(), text: 'lorem ipsum ipsum dolor dolor sit amet' },\r\n            { sender: 'Admin', id: Date.now(), date: new Date(), text: 'lorem ipsum amet' }\r\n          ]\r\n        },\r\n        {\r\n          desire: { id: 2, title: 'Desire title first' },\r\n          companion: { id: 2, name: 'Ivan' },\r\n          messages: [\r\n            { sender: 'Admin', id: Date.now(), date: new Date(), text: 'lorem ipsum dolor sit amet' },\r\n            { sender: 'Ivan', id: Date.now(), date: new Date(), text: 'lorem ipsum dolor sit amet ipsum dolor sit amet' },\r\n            { sender: 'Admin', id: Date.now(), date: new Date(), text: 'lorem ipsum ipsum dolor dolor sit amet' },\r\n            { sender: 'Ivan', id: Date.now(), date: new Date(), text: 'lorem ipsum amet' }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: 2,\r\n      username: 'user',\r\n      password: 'user',\r\n      firstName: 'Ivan',\r\n      lastName: 'User',\r\n      role: Role.Admin,\r\n      name: \"Kirill\",\r\n      second_name: null,\r\n      email: null,\r\n      phone: \"380953444348\",\r\n      rating: null,\r\n      position: null,\r\n      telegram: null,\r\n      viber: null,\r\n      whatsapp: null,\r\n      site: null,\r\n      avatar: null,\r\n      email_verified_at: null,\r\n      activate: 1,\r\n      bx_id: 26,\r\n      created_at: \"2020-04-28T08:28:16.000000Z\",\r\n      updated_at: \"2020-04-28T08:28:34.000000Z\",\r\n      deleted_at: null,\r\n      chats: [\r\n        {\r\n          desire: { id: 3, title: 'Desire title first' },\r\n          companion: { id: 1, name: 'Admin' },\r\n          messages: [\r\n            { sender: 'Ivan', id: Date.now(), date: new Date(), text: 'lorem ipsum dolor sit amet' },\r\n            { sender: 'Admin', id: Date.now(), date: new Date(), text: 'lorem ipsum dolor sit amet ipsum dolor sit amet' },\r\n            { sender: 'Ivan', id: Date.now(), date: new Date(), text: 'lorem ipsum ipsum dolor dolor sit amet' },\r\n            { sender: 'Admin', id: Date.now(), date: new Date(), text: 'lorem ipsum amet' }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    ,\r\n    {\r\n      id: 3,\r\n      username: 'user',\r\n      password: 'user',\r\n      firstName: 'John',\r\n      lastName: 'User',\r\n      role: Role.User,\r\n      name: \"John\",\r\n      second_name: null,\r\n      email: null,\r\n      phone: \"380953444348\",\r\n      rating: null,\r\n      position: null,\r\n      telegram: null,\r\n      viber: null,\r\n      whatsapp: null,\r\n      site: null,\r\n      avatar: null,\r\n      email_verified_at: null,\r\n      activate: 1,\r\n      bx_id: 26,\r\n      created_at: \"2020-04-28T08:28:16.000000Z\",\r\n      updated_at: \"2020-04-28T08:28:34.000000Z\",\r\n      deleted_at: null,\r\n      chats: [\r\n        {\r\n          desire: { id: 1, title: 'Desire title first' },\r\n          companion: { id: 1, name: 'Admin' },\r\n          messages: [\r\n            { sender: 'John', id: Date.now(), date: new Date(), text: 'lorem ipsum dolor sit amet' },\r\n            { sender: 'Admin', id: Date.now(), date: new Date(), text: 'lorem ipsum dolor sit amet ipsum dolor sit amet' },\r\n            { sender: 'John', id: Date.now(), date: new Date(), text: 'lorem ipsum ipsum dolor dolor sit amet' },\r\n            { sender: 'Admin', id: Date.now(), date: new Date(), text: 'lorem ipsum amet' }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  let realFetch = window.fetch;\r\n  window.fetch = function (url, opts) {\r\n    const authHeader = opts.headers['Authorization'];\r\n    const isLoggedIn = authHeader && authHeader.startsWith('Bearer fake-jwt-token');\r\n    const roleString = isLoggedIn && authHeader.split('.')[1];\r\n    const role = roleString ? Role[roleString] : null;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      // wrap in timeout to simulate server api call\r\n      setTimeout(() => {\r\n        // authenticate - public\r\n        if (url.endsWith('/api/auth/login') && opts.method === 'POST') {\r\n          const params = JSON.parse(opts.body);\r\n          const user = users.find(x => x.username === params.username && x.password === params.password);\r\n          if (!user) return error('Username or password is incorrect');\r\n          return ok({\r\n            id: user.id,\r\n            username: user.username,\r\n            firstName: user.firstName,\r\n            lastName: user.lastName,\r\n            role: user.role,\r\n            token: `fake-jwt-token.${user.role}`,\r\n            name: user.name,\r\n            second_name: user.second_name,\r\n            email: user.email,\r\n            phone: user.phone,\r\n            rating: user.rating,\r\n            position: user.position,\r\n            telegram: user.telegram,\r\n            viber: user.viber,\r\n            whatsapp: user.whatsapp,\r\n            site: user.site,\r\n            avatar: user.avatar,\r\n            email_verified_at: user.email_verified_at,\r\n            activate: user.activate,\r\n            bx_id: user.bx_id,\r\n            created_at: user.created_at,\r\n            updated_at: user.updated_at,\r\n            deleted_at: user.deleted_at,\r\n            chats: user.chats\r\n          });\r\n        }\r\n\r\n        if (url.endsWith('/api/auth/register') && opts.method === 'POST') {\r\n          const params = JSON.parse(opts.body);\r\n          const user = {\r\n            id: users.length + 1,\r\n            username: params.username,\r\n            password: params.password,\r\n            firstName: 'Normal',\r\n            lastName: Role.User,\r\n            name: null,\r\n            second_name: null,\r\n            email: null,\r\n            phone: null,\r\n            rating: null,\r\n            position: null,\r\n            telegram: null,\r\n            viber: null,\r\n            whatsapp: null,\r\n            site: null,\r\n            avatar: null,\r\n            email_verified_at: null,\r\n            activate: null,\r\n            bx_id: null,\r\n            created_at: null,\r\n            updated_at: null,\r\n            deleted_at: null,\r\n            chats: null\r\n          };\r\n          users.push(user);\r\n\r\n          return ok({\r\n            id: user.id,\r\n            username: user.username,\r\n            firstName: user.firstName,\r\n            lastName: user.lastName,\r\n            role: user.role,\r\n            token: `fake-jwt-token.${user.role}`,\r\n            name: user.name,\r\n            second_name: user.second_name,\r\n            email: user.email,\r\n            phone: user.phone,\r\n            rating: user.rating,\r\n            position: user.position,\r\n            telegram: user.telegram,\r\n            viber: user.viber,\r\n            whatsapp: user.whatsapp,\r\n            site: user.site,\r\n            avatar: user.avatar,\r\n            email_verified_at: user.email_verified_at,\r\n            activate: user.activate,\r\n            bx_id: user.bx_id,\r\n            created_at: user.created_at,\r\n            updated_at: user.updated_at,\r\n            deleted_at: user.deleted_at,\r\n            chats: user.chats\r\n          });\r\n        }\r\n\r\n        // get user by id - admin or user (user can only access their own record)\r\n        if (url.match(/\\/users\\/\\d+$/) && opts.method === 'GET') {\r\n          if (!isLoggedIn) return unauthorised();\r\n\r\n          // get id from request url\r\n          let urlParts = url.split('/');\r\n          let id = parseInt(urlParts[urlParts.length - 1]);\r\n\r\n          // only allow normal users access to their own record\r\n          const currentUser = users.find(x => x.role === role);\r\n          if (id !== currentUser.id && role !== Role.Admin) return unauthorised();\r\n\r\n          const user = users.find(x => x.id === id);\r\n          return ok(user);\r\n        }\r\n\r\n        // get all users - admin only\r\n        if (url.endsWith('/users') && opts.method === 'GET') {\r\n          if (role !== Role.Admin) return unauthorised();\r\n          return ok(users);\r\n        }\r\n\r\n        // pass through any requests not handled above\r\n        realFetch(url, opts).then(response => resolve(response));\r\n\r\n        // private helper functions\r\n\r\n        function ok(body) {\r\n          resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(body)) })\r\n        }\r\n\r\n        function unauthorised() {\r\n          resolve({ status: 401, text: () => Promise.resolve(JSON.stringify({ message: 'Unauthorised' })) })\r\n        }\r\n\r\n        function error(message) {\r\n          resolve({ status: 400, text: () => Promise.resolve(JSON.stringify({ message })) })\r\n        }\r\n      }, 500);\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}