{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport 'isomorphic-unfetch';\nimport { API_KEY } from './config';\nvar BASE_URI = 'https://api.themoviedb.org/3/movie';\nvar IMAGE_BASE_URI = 'https://image.tmdb.org/t/p';\n\nvar fetchWithErrorHandling = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return fetch(url);\n\n          case 3:\n            _context.next = 5;\n            return _context.sent.json();\n\n          case 5:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", {\n              error: true\n            });\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 8]]);\n  }));\n\n  return function fetchWithErrorHandling(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport var getMovieDetails = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", fetchWithErrorHandling(\"\".concat(BASE_URI, \"/\").concat(id, \"?api_key=\").concat(API_KEY, \"&language=en-US&append_to_response=credits\")));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getMovieDetails(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getUpcomingMovies = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", fetchWithErrorHandling(\"\".concat(BASE_URI, \"/upcoming?api_key=\").concat(API_KEY, \"&language=en-US&page=1\")));\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getUpcomingMovies() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getImageSrc = function getImageSrc(path, size) {\n  return \"\".concat(IMAGE_BASE_URI, \"/\").concat(size ? \"w\".concat(size) : 'original').concat(path);\n};","map":{"version":3,"sources":["C:/Users/user/projects/vibe/src/utils/apiCalls.js"],"names":["API_KEY","BASE_URI","IMAGE_BASE_URI","fetchWithErrorHandling","url","fetch","json","error","getMovieDetails","id","getUpcomingMovies","getImageSrc","path","size"],"mappings":";;AAAA,OAAO,oBAAP;AAEA,SAASA,OAAT,QAAwB,UAAxB;AAEA,IAAMC,QAAQ,GAAG,oCAAjB;AACA,IAAMC,cAAc,GAAG,4BAAvB;;AAEA,IAAMC,sBAAsB;AAAA,sEAAG,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEPC,KAAK,CAACD,GAAD,CAFE;;AAAA;AAAA;AAAA,iCAEKE,IAFL;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAIpB;AAAEC,cAAAA,KAAK,EAAE;AAAT,aAJoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAtBJ,sBAAsB;AAAA;AAAA;AAAA,GAA5B;;AAQA,OAAO,IAAMK,eAAe;AAAA,uEAAG,kBAAMC,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA,8CAC7BN,sBAAsB,WACjBF,QADiB,cACLQ,EADK,sBACST,OADT,gDADO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfQ,eAAe;AAAA;AAAA;AAAA,GAArB;AAKP,OAAO,IAAME,iBAAiB;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA,8CAC/BP,sBAAsB,WACjBF,QADiB,+BACYD,OADZ,4BADS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBU,iBAAiB;AAAA;AAAA;AAAA,GAAvB;AAKP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAOC,IAAP;AAAA,mBACtBX,cADsB,cACJW,IAAI,cAAOA,IAAP,IAAgB,UADhB,SAC6BD,IAD7B;AAAA,CAApB","sourcesContent":["import 'isomorphic-unfetch';\r\n\r\nimport { API_KEY } from './config';\r\n\r\nconst BASE_URI = 'https://api.themoviedb.org/3/movie';\r\nconst IMAGE_BASE_URI = 'https://image.tmdb.org/t/p';\r\n\r\nconst fetchWithErrorHandling = async url => {\r\n  try {\r\n    return await (await fetch(url)).json();\r\n  } catch (err) {\r\n    return { error: true };\r\n  }\r\n};\r\n\r\nexport const getMovieDetails = async id =>\r\n  fetchWithErrorHandling(\r\n    `${BASE_URI}/${id}?api_key=${API_KEY}&language=en-US&append_to_response=credits`\r\n  );\r\n\r\nexport const getUpcomingMovies = async () =>\r\n  fetchWithErrorHandling(\r\n    `${BASE_URI}/upcoming?api_key=${API_KEY}&language=en-US&page=1`\r\n  );\r\n\r\nexport const getImageSrc = (path, size) =>\r\n  `${IMAGE_BASE_URI}/${size ? `w${size}` : 'original'}${path}`;\r\n"]},"metadata":{},"sourceType":"module"}