{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { CREATE_POST, FETCH_POST } from \"../actions/types\";\nconst initialState = {\n  posts: [],\n  fetchesPosts: []\n};\nexport const postsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CREATE_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        posts: state.posts.concat(action.payload)\n      });\n\n    case FETCH_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        fetchesPosts: action.payload\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/user/projects/vibe/src/redux/reducers/postsReducer.ts"],"names":["CREATE_POST","FETCH_POST","initialState","posts","fetchesPosts","postsReducer","state","action","type","concat","payload"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAwCC,UAAxC,QAA0D,kBAA1D;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,YAAY,EAAE;AAFK,CAArB;AAKA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAoD;AAC9E,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,WAAL;AACE,6CAAYM,KAAZ;AAAmBH,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,CAAYM,MAAZ,CAAmBF,MAAM,CAACG,OAA1B;AAA1B;;AAEF,SAAKT,UAAL;AACE,6CAAYK,KAAZ;AAAmBF,QAAAA,YAAY,EAAEG,MAAM,CAACG;AAAxC;;AAEF;AACE,aAAOJ,KAAP;AARJ;AAUD,CAXM","sourcesContent":["import { CREATE_POST, PostsActionTypes, FETCH_POST } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  posts: [],\r\n  fetchesPosts: []\r\n};\r\n\r\nexport const postsReducer = (state = initialState, action: PostsActionTypes) => {\r\n  switch (action.type) {\r\n    case CREATE_POST:\r\n      return { ...state, posts: state.posts.concat(action.payload) }\r\n\r\n    case FETCH_POST:\r\n      return { ...state, fetchesPosts: action.payload }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}