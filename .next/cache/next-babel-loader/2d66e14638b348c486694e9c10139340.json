{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\projects\\\\vibe\\\\src\\\\components\\\\login-page\\\\SignUp.jsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport s from './login.module.scss';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { useRouter } from 'next/router';\nimport { authenticationService } from '../../_services';\nexport default function SignUp() {\n  const router = useRouter();\n  const {\n    0: formUser,\n    1: setFormUser\n  } = useState(true);\n  return __jsx(\"div\", {\n    className: s.login_page_form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, \"Registration\"), __jsx(Formik, {\n    initialValues: {\n      username: '',\n      email: '',\n      password: '',\n      password_confirmation: '',\n      phone: ''\n    },\n    validationSchema: Yup.object().shape({\n      username: Yup.string().required('Username is required'),\n      password: Yup.string().required('Password is required'),\n      email: Yup.string().required('Email is required'),\n      password_confirmation: Yup.string().required('Password is required'),\n      phone: Yup.string()\n    }),\n    onSubmit: ({\n      username,\n      email,\n      password,\n      password_confirmation\n    }, {\n      setStatus,\n      setSubmitting\n    }) => {\n      setStatus();\n      formUser ? authenticationService.registrationClient(username, password, email, password_confirmation) : authenticationService.registrationProvider(username, password, email, password_confirmation, phone).then(user => {\n        console.log('user:', user);\n        const {\n          from\n        } = // this.props.location.state ||\n        {\n          from: {\n            pathname: \"/\"\n          }\n        };\n        router.push(from);\n      }, error => {\n        console.log('error:', error);\n        setSubmitting(false);\n        setStatus(error);\n      });\n    },\n    render: ({\n      errors,\n      status,\n      touched,\n      isSubmitting\n    }) => __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: `${s.role_toggler}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, formUser ? __jsx(\"span\", {\n      className: `${s.user}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 27\n      }\n    }, \"as User\") : __jsx(\"span\", {\n      className: `${s.model}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 74\n      }\n    }, \"as Model\"), __jsx(\"label\", {\n      className: s.switch,\n      htmlFor: \"checkbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }\n    }, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"checkbox\",\n      onChange: () => setFormUser(!formUser),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }), __jsx(\"div\", {\n      className: `${s.slider} ${s.round}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }))), __jsx(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"username\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 15\n      }\n    }, \"Username\"), __jsx(Field, {\n      name: \"username\",\n      type: \"text\",\n      className: 'form-control' + (errors.username && touched.username ? ' is-invalid' : ''),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 15\n      }\n    }), __jsx(ErrorMessage, {\n      name: \"username\",\n      component: \"div\",\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 15\n      }\n    })), __jsx(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }\n    }, \"Email\"), __jsx(Field, {\n      name: \"email\",\n      type: \"email\",\n      className: 'form-control' + (errors.email && touched.email ? ' is-invalid' : ''),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 15\n      }\n    }), __jsx(ErrorMessage, {\n      name: \"email\",\n      component: \"div\",\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }\n    })), __jsx(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }\n    }, \"Password\"), __jsx(Field, {\n      name: \"password\",\n      type: \"password\",\n      className: 'form-control' + (errors.password && touched.password ? ' is-invalid' : ''),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    }), __jsx(ErrorMessage, {\n      name: \"password\",\n      component: \"div\",\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    })), __jsx(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"password_confirmation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }\n    }, \"Confirm password\"), __jsx(Field, {\n      name: \"password_confirmation\",\n      type: \"password\",\n      className: 'form-control' + (errors.password_confirmation && touched.password_confirmation ? ' is-invalid' : ''),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }\n    }), __jsx(ErrorMessage, {\n      name: \"password_confirmation\",\n      component: \"div\",\n      className: \"invalid-feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 15\n      }\n    })), __jsx(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"phone\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 15\n      }\n    }, \"Phone\"), __jsx(Field, {\n      name: \"phone\",\n      type: \"number\",\n      className: 'form-control',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    })), __jsx(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, __jsx(\"button\", {\n      type: \"submit\",\n      className: `btn ${s.submit_btn}`,\n      disabled: isSubmitting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    }, \"Submit\"), isSubmitting && __jsx(\"div\", {\n      className: \"spinner-border spinner-border-sm text-primary ml-3\",\n      role: \"status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }, __jsx(\"span\", {\n      className: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 19\n      }\n    }, \"Loading...\"))), status && __jsx(\"div\", {\n      className: 'alert alert-danger',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }\n    }, JSON.stringify(status), console.log(status))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/user/projects/vibe/src/components/login-page/SignUp.jsx"],"names":["React","useState","s","Formik","Field","Form","ErrorMessage","Yup","useRouter","authenticationService","SignUp","router","formUser","setFormUser","login_page_form","username","email","password","password_confirmation","phone","object","shape","string","required","setStatus","setSubmitting","registrationClient","registrationProvider","then","user","console","log","from","pathname","push","error","errors","status","touched","isSubmitting","role_toggler","model","switch","slider","round","submit_btn","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport s from './login.module.scss';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useRouter } from 'next/router';\r\nimport { authenticationService } from '../../_services';\r\n\r\nexport default function SignUp() {\r\n  const router = useRouter();\r\n  const [formUser, setFormUser] = useState(true);\r\n\r\n  return (\r\n    <div className={s.login_page_form}>\r\n      <h2>Registration</h2>\r\n      <Formik\r\n        initialValues={{\r\n          username: '',\r\n          email: '',\r\n          password: '',\r\n          password_confirmation: '',\r\n          phone: ''\r\n        }}\r\n        validationSchema={Yup.object().shape({\r\n          username: Yup.string().required('Username is required'),\r\n          password: Yup.string().required('Password is required'),\r\n          email: Yup.string().required('Email is required'),\r\n          password_confirmation: Yup.string().required('Password is required'),\r\n          phone: Yup.string()\r\n        })}\r\n        onSubmit={({ username, email, password, password_confirmation }, { setStatus, setSubmitting }) => {\r\n          setStatus();\r\n          (formUser)\r\n            ? authenticationService.registrationClient(username, password, email, password_confirmation)\r\n            : authenticationService.registrationProvider(username, password, email, password_confirmation, phone)\r\n              .then(\r\n                user => {\r\n                  console.log('user:', user);\r\n                  const { from } =\r\n                    // this.props.location.state ||\r\n                    { from: { pathname: \"/\" } };\r\n                  router.push(from);\r\n                },\r\n                error => {\r\n                  console.log('error:', error);\r\n                  setSubmitting(false);\r\n                  setStatus(error);\r\n                }\r\n              );\r\n        }}\r\n        render={({ errors, status, touched, isSubmitting }) => (\r\n          <Form>\r\n            <div className={`${s.role_toggler}`}>\r\n              {formUser ? <span className={`${s.user}`}>as User</span> : <span className={`${s.model}`}>as Model</span>}\r\n              <label className={s.switch} htmlFor=\"checkbox\">\r\n                <input type=\"checkbox\" id=\"checkbox\" onChange={() => setFormUser(!formUser)} />\r\n                <div className={`${s.slider} ${s.round}`} />\r\n              </label>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"username\">Username</label>\r\n              <Field name=\"username\" type=\"text\" className={'form-control' + (errors.username && touched.username ? ' is-invalid' : '')} />\r\n              <ErrorMessage name=\"username\" component=\"div\" className=\"invalid-feedback\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"email\">Email</label>\r\n              <Field name=\"email\" type=\"email\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\r\n              <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"password\">Password</label>\r\n              <Field name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\r\n              <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"password_confirmation\">Confirm password</label>\r\n              <Field name=\"password_confirmation\" type=\"password\" className={'form-control' + (errors.password_confirmation && touched.password_confirmation ? ' is-invalid' : '')} />\r\n              <ErrorMessage name=\"password_confirmation\" component=\"div\" className=\"invalid-feedback\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"phone\">Phone</label>\r\n              <Field name=\"phone\" type=\"number\" className={'form-control'} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <button type=\"submit\" className={`btn ${s.submit_btn}`} disabled={isSubmitting}>Submit</button>\r\n              {isSubmitting &&\r\n                <div className=\"spinner-border spinner-border-sm text-primary ml-3\" role=\"status\">\r\n                  <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n              }\r\n            </div>\r\n            {status &&\r\n              <div className={'alert alert-danger'}>{JSON.stringify(status)}{console.log(status)}</div>\r\n            }\r\n          </Form>\r\n        )}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}