{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from 'react';\nimport Location from '../components/home-page/Location';\nimport Search from '../components/home-page/Search';\nimport Categories from '../components/home-page/Categories';\nimport EscortContent from '../components/home-page/EscortContent';\nimport { connect } from 'react-redux';\nimport { getCategories, getAllPosts, getLocationsInfo } from '../redux/actions/actions';\n\nfunction Home({\n  categories,\n  getCategories,\n  getAllPosts,\n  posts,\n  getLocationsInfo,\n  states\n}) {\n  useEffect(() => {\n    getCategories();\n    getAllPosts();\n    getLocationsInfo();\n  }, []);\n  return __jsx(\"div\", null, __jsx(Location, {\n    states: states\n  }), __jsx(Search, null), __jsx(Categories, {\n    categories: categories\n  }), __jsx(EscortContent, {\n    posts: posts\n  }));\n}\n\nconst mapStateToProps = state => {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    categories: state.app.categories,\n    posts: state.app.posts,\n    states: state.app.states\n  });\n};\n\nconst mapDispatchToPops = {\n  getCategories,\n  getAllPosts,\n  getLocationsInfo\n};\nexport default connect(mapStateToProps, mapDispatchToPops)(Home);","map":null,"metadata":{},"sourceType":"module"}