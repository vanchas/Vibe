{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\nimport { takeEvery, put, call } from 'redux-saga/effects';\nimport { REQUEST_POSTS, FETCH_POST } from '../actions/types';\nimport { showLoader, hideLoader, showAlert } from '../actions/actions';\nexport function* sagaWatcher() {\n  yield takeEvery(REQUEST_POSTS, sagaWorker);\n}\n\nfunction* sagaWorker() {\n  try {\n    yield put(showLoader());\n    const payload = yield call(fetchPosts);\n    yield put({\n      type: FETCH_POST,\n      payload\n    });\n    yield put(hideLoader());\n  } catch (e) {\n    yield put(showAlert('Something going wrong'));\n    yield put(hideLoader());\n  }\n}\n\nasync function fetchPosts() {\n  const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n  return await response.json();\n} // export function* rootSaga () {\n//   yield [\n//       fork(sagaWatcher), // saga1 can also yield [ fork(actionOne), fork(actionTwo) ]\n//   ];\n// }","map":{"version":3,"sources":["C:/Users/user/projects/vibe/src/redux/sagas/sagas.ts"],"names":["fetch","takeEvery","put","call","REQUEST_POSTS","FETCH_POST","showLoader","hideLoader","showAlert","sagaWatcher","sagaWorker","payload","fetchPosts","type","e","response","json"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,QAAqC,oBAArC;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,kBAA1C;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,SAAjC,QAAkD,oBAAlD;AAEA,OAAO,UAAUC,WAAV,GAAwB;AAC7B,QAAMR,SAAS,CAACG,aAAD,EAAgBM,UAAhB,CAAf;AACD;;AAED,UAAUA,UAAV,GAAuB;AACrB,MAAI;AACF,UAAMR,GAAG,CAACI,UAAU,EAAX,CAAT;AACA,UAAMK,OAAO,GAAG,MAAMR,IAAI,CAACS,UAAD,CAA1B;AACA,UAAMV,GAAG,CAAC;AAAEW,MAAAA,IAAI,EAAER,UAAR;AAAoBM,MAAAA;AAApB,KAAD,CAAT;AACA,UAAMT,GAAG,CAACK,UAAU,EAAX,CAAT;AACD,GALD,CAKE,OAAOO,CAAP,EAAU;AACV,UAAMZ,GAAG,CAACM,SAAS,CAAC,uBAAD,CAAV,CAAT;AACA,UAAMN,GAAG,CAACK,UAAU,EAAX,CAAT;AACD;AACF;;AAED,eAAeK,UAAf,GAA4B;AAC1B,QAAMG,QAAQ,GAAG,MAAMf,KAAK,CAAC,4CAAD,CAA5B;AACA,SAAO,MAAMe,QAAQ,CAACC,IAAT,EAAb;AACD,C,CAED;AACA;AACA;AACA;AACA","sourcesContent":["import fetch from 'isomorphic-unfetch';\r\nimport { takeEvery, put, call } from 'redux-saga/effects';\r\nimport { REQUEST_POSTS, FETCH_POST } from '../actions/types';\r\nimport { showLoader, hideLoader, showAlert } from '../actions/actions';\r\n\r\nexport function* sagaWatcher() {\r\n  yield takeEvery(REQUEST_POSTS, sagaWorker)\r\n}\r\n\r\nfunction* sagaWorker() {\r\n  try {\r\n    yield put(showLoader());\r\n    const payload = yield call(fetchPosts);\r\n    yield put({ type: FETCH_POST, payload });\r\n    yield put(hideLoader());\r\n  } catch (e) {\r\n    yield put(showAlert('Something going wrong'));\r\n    yield put(hideLoader());\r\n  }\r\n}\r\n\r\nasync function fetchPosts() {\r\n  const response = await fetch('https://jsonplaceholder.typicode.com/posts');\r\n  return await response.json();\r\n}\r\n\r\n// export function* rootSaga () {\r\n//   yield [\r\n//       fork(sagaWatcher), // saga1 can also yield [ fork(actionOne), fork(actionTwo) ]\r\n//   ];\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}