{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\projects\\\\vibe\\\\src\\\\components\\\\login-page\\\\SignUp.jsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport s from './login.module.scss';\nimport fetch from 'isomorphic-unfetch';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { useRouter } from 'next/router';\nimport { authenticationService } from '../../_services';\nexport default function SignUp() {\n  const router = useRouter();\n  const {\n    0: name,\n    1: setName\n  } = useState('');\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState('');\n  const {\n    0: password_confirmation,\n    1: setPassword_confirmation\n  } = useState('');\n\n  const submitHandler = async e => {\n    e.preventDefault(); // authenticationService.registrationClient(name, password, email, password_confirmation);\n\n    await fetch(`https://intim-vibe-api.padilo.pro/api/client/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        password,\n        email,\n        password_confirmation\n      })\n    }).then(res => {\n      console.log(res);\n    }).catch(err => console.error('Error: ', err));\n  };\n\n  return __jsx(\"div\", {\n    className: s.login_page_form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, \"Registration\"), __jsx(\"form\", {\n    onSubmit: e => submitHandler(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, \"name\", __jsx(\"input\", {\n    type: \"text\",\n    onChange: e => setName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  })), __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, \"email\", __jsx(\"input\", {\n    type: \"email\",\n    onChange: e => setEmail(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  })), __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, \"password\", __jsx(\"input\", {\n    type: \"password\",\n    onChange: e => setPassword(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  })), __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, \"confirm password\", __jsx(\"input\", {\n    type: \"password\",\n    onChange: e => setPassword_confirmation(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  })), __jsx(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, \"submit\")));\n}","map":{"version":3,"sources":["C:/Users/user/projects/vibe/src/components/login-page/SignUp.jsx"],"names":["React","useState","s","fetch","Formik","Field","Form","ErrorMessage","Yup","useRouter","authenticationService","SignUp","router","name","setName","email","setEmail","password","setPassword","password_confirmation","setPassword_confirmation","submitHandler","e","preventDefault","method","headers","body","JSON","stringify","then","res","console","log","catch","err","error","login_page_form","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport s from './login.module.scss';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useRouter } from 'next/router';\r\nimport { authenticationService } from '../../_services';\r\n\r\nexport default function SignUp() {\r\n  const router = useRouter();\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [password_confirmation, setPassword_confirmation] = useState('');\r\n\r\n  const submitHandler = async e => {\r\n    e.preventDefault();\r\n    // authenticationService.registrationClient(name, password, email, password_confirmation);\r\n    await fetch(`https://intim-vibe-api.padilo.pro/api/client/register`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        name,\r\n        password,\r\n        email,\r\n        password_confirmation\r\n      })\r\n    }).then(res => {\r\n      console.log(res);\r\n    }).catch(err => console.error('Error: ', err))\r\n  }\r\n\r\n  return (\r\n    <div className={s.login_page_form}>\r\n      <h2>Registration</h2>\r\n      <form onSubmit={e => submitHandler(e)}>\r\n        <label>name\r\n          <input type=\"text\" onChange={e => setName(e.target.value)} />\r\n        </label>\r\n        <label>email\r\n          <input type=\"email\" onChange={e => setEmail(e.target.value)} />\r\n        </label>\r\n        <label>password\r\n          <input type=\"password\" onChange={e => setPassword(e.target.value)} />\r\n        </label>\r\n        <label>confirm password\r\n          <input type=\"password\" onChange={e => setPassword_confirmation(e.target.value)} />\r\n        </label>\r\n        <button type=\"submit\">submit</button>\r\n      </form>\r\n      {/* <Formik\r\n        initialValues={{\r\n          username: '',\r\n          email: '',\r\n          password: '',\r\n          password_confirmation: ''\r\n        }}\r\n        validationSchema={Yup.object().shape({\r\n          username: Yup.string().required('Username is required'),\r\n          password: Yup.string().required('Password is required'),\r\n          email: Yup.string().required('Email is required'),\r\n          password_confirmation: Yup.string().required('Password is required')\r\n        })}\r\n        onSubmit={({ username, email, password, password_confirmation }, { setStatus, setSubmitting }) => {\r\n          setStatus();\r\n          authenticationService.registrationClient(username, password, email, password_confirmation)\r\n            .then(\r\n              user => {\r\n                console.log('user:',user);\r\n                const { from } =\r\n                  // this.props.location.state ||\r\n                  { from: { pathname: \"/\" } };\r\n                router.push(from);\r\n              },\r\n              error => {\r\n                console.log('error:',error);\r\n                setSubmitting(false);\r\n                setStatus(error);\r\n              }\r\n            );\r\n        }}\r\n        render={({ errors, status, touched, isSubmitting }) => (\r\n          <Form>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"username\">Username</label>\r\n              <Field name=\"username\" type=\"text\" className={'form-control' + (errors.username && touched.username ? ' is-invalid' : '')} />\r\n              <ErrorMessage name=\"username\" component=\"div\" className=\"invalid-feedback\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"email\">Email</label>\r\n              <Field name=\"email\" type=\"email\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\r\n              <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"password\">Password</label>\r\n              <Field name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\r\n              <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"password_confirmation\">Confirm password</label>\r\n              <Field name=\"password_confirmation\" type=\"password\" className={'form-control' + (errors.password_confirmation && touched.password_confirmation ? ' is-invalid' : '')} />\r\n              <ErrorMessage name=\"password_confirmation\" component=\"div\" className=\"invalid-feedback\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <button type=\"submit\" className={`btn ${s.submit_btn}`} disabled={isSubmitting}>Submit</button>\r\n              {isSubmitting &&\r\n                <div className=\"spinner-border spinner-border-sm text-primary ml-3\" role=\"status\">\r\n                  <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n              }\r\n            </div>\r\n            {status &&\r\n              <div className={'alert alert-danger'}>{JSON.stringify(status)}{console.log(status)}</div>\r\n            }\r\n          </Form>\r\n        )}\r\n      /> */}\r\n    </div>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}