{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_ALL_SUPPORT_TASKS, DELETE_SUPPORT_TASK } from \"../actions/types\";\nconst initialState = {\n  tasks: []\n};\nexport const adminReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_ALL_SUPPORT_TASKS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasks: action.payload\n      });\n\n    case DELETE_SUPPORT_TASK:\n      const tasks = state.tasks.filter(task => task.id != action.payload);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasks\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/user/projects/vibe/src/redux/reducers/adminReducer.ts"],"names":["GET_ALL_SUPPORT_TASKS","DELETE_SUPPORT_TASK","initialState","tasks","adminReducer","state","action","type","payload","filter","task","id"],"mappings":";;;;;;AAAA,SAASA,qBAAT,EAAgCC,mBAAhC,QAA2D,kBAA3D;AAGA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AADY,CAArB;AAIA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAU,GAAGH,YAAd,EAA4BI,MAA5B,KAA4C;AACtE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,qBAAL;AACE,6CAAYK,KAAZ;AAAmBF,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAAjC;;AAEF,SAAKP,mBAAL;AACE,YAAME,KAAK,GAAGE,KAAK,CAACF,KAAN,CAAYM,MAAZ,CAAoBC,IAAD,IAAeA,IAAI,CAACC,EAAL,IAAWL,MAAM,CAACE,OAApD,CAAd;AACA,6CAAYH,KAAZ;AAAmBF,QAAAA;AAAnB;;AAEF;AACE,aAAOE,KAAP;AATJ;AAWD,CAZM","sourcesContent":["import { GET_ALL_SUPPORT_TASKS, DELETE_SUPPORT_TASK } from \"../actions/types\";\r\n\r\n\r\nconst initialState = {\r\n  tasks: []\r\n}\r\n\r\nexport const adminReducer = (state: any = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case GET_ALL_SUPPORT_TASKS:\r\n      return { ...state, tasks: action.payload }\r\n\r\n    case DELETE_SUPPORT_TASK:\r\n      const tasks = state.tasks.filter((task: any) => task.id != action.payload);\r\n      return { ...state, tasks }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}