{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\projects\\\\vibe\\\\src\\\\components\\\\model-profile\\\\ReportTrafficking.jsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport s from \"./profile.module.scss\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Label, Form, FormGroup } from 'reactstrap';\n\nconst ReportTraffickingModalWindow = props => {\n  const {\n    buttonLabel,\n    className\n  } = props;\n  const {\n    0: modal,\n    1: setModal\n  } = useState(false);\n\n  const toggle = () => setModal(!modal);\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, __jsx(Form, {\n    inline: true,\n    onSubmit: e => e.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    color: \"\",\n    className: `font-weight-bold text-white w-100 ${s.report_btn}`,\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, buttonLabel)), __jsx(Modal, {\n    isOpen: modal,\n    toggle: toggle,\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, __jsx(ModalHeader, {\n    toggle: toggle,\n    style: {\n      fontFamily: 'Audiowide, cursive'\n    },\n    className: \"bg-dark text-info border-bottom border-secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, buttonLabel), __jsx(ModalBody, {\n    className: \"pb-0 bg-dark text-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, __jsx(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }\n  }, \"ANTI-TRAFFICKING ADVOCACY:\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }\n  }, \"VibeCity is wholly committed to raising awareness on the issue of human trafficking and engages in best practices and advocacy. In the event we become aware of any incident of trafficking, we cooperate enthusiastically with law enforcement and agencies involved in combating the abuse of human rights.\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }\n  }, __jsx(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 14\n    }\n  }, \"Please report any suspected sexual exploitation of minors and/or human trafficking to the appropriate authorities.\"))), __jsx(Form, {\n    className: \"container bg-dark text-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, __jsx(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }, __jsx(Label, {\n    className: \"w-100 d-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, \"Link for Evidence of Misuse:\", __jsx(Input, {\n    type: \"text\",\n    onChange: () => {},\n    className: \"w-100 d-block bg-dark text-white boredr border-secondary\",\n    placeholder: \"http://...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 15\n    }\n  })))), __jsx(ModalFooter, {\n    className: \"bg-dark text-white border-top border-secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    color: \"info\",\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }, \"SEND REPORT\"), ' ', __jsx(Button, {\n    color: \"secondary\",\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, \"Cancel\"))));\n};\n\nexport default ReportTraffickingModalWindow;\nModal.propTypes = {\n  // boolean to control the state of the popover\n  isOpen: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  // if modal should be centered vertically in viewport\n  centered: PropTypes.bool,\n  // corresponds to bootstrap's modal sizes, ie. 'lg' or 'sm'\n  size: PropTypes.string,\n  // callback for toggling isOpen in the controlling component\n  toggle: PropTypes.func,\n  role: PropTypes.string,\n  // defaults to \"dialog\"\n  // used to reference the ID of the title element in the modal\n  labelledBy: PropTypes.string,\n  keyboard: PropTypes.bool,\n  // control backdrop, see http://v4-alpha.getbootstrap.com/components/modal/#options\n  backdrop: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['static'])]),\n  // if body of modal should be scrollable when content is long\n  scrollable: PropTypes.bool,\n  // allows for a node/component to exist next to the modal (outside of it). Useful for external close buttons\n  // external: PropTypes.node,\n  // called on componentDidMount\n  onEnter: PropTypes.func,\n  // called on componentWillUnmount\n  onExit: PropTypes.func,\n  // called when done transitioning in\n  onOpened: PropTypes.func,\n  // called when done transitioning out\n  onClosed: PropTypes.func,\n  className: PropTypes.string,\n  wrapClassName: PropTypes.string,\n  modalClassName: PropTypes.string,\n  backdropClassName: PropTypes.string,\n  contentClassName: PropTypes.string,\n  // boolean to control whether the fade transition occurs (default: true)\n  fade: PropTypes.bool,\n  cssModule: PropTypes.object,\n  // zIndex defaults to 1000.\n  zIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  // if modal should be destructed/removed from DOM after closing\n  unmountOnClose: PropTypes.bool,\n  // defaults to true\n  // if the element which triggered the modal to open should focused after the modal closes (see example somewhere below)\n  returnFocusAfterClose: PropTypes.bool // defaults to true\n\n};","map":{"version":3,"sources":["C:/Users/user/projects/vibe/src/components/model-profile/ReportTrafficking.jsx"],"names":["React","useState","PropTypes","s","Button","Modal","ModalHeader","ModalBody","ModalFooter","Input","Label","Form","FormGroup","ReportTraffickingModalWindow","props","buttonLabel","className","modal","setModal","toggle","e","preventDefault","report_btn","fontFamily","propTypes","isOpen","bool","autoFocus","centered","size","string","func","role","labelledBy","keyboard","backdrop","oneOfType","oneOf","scrollable","onEnter","onExit","onOpened","onClosed","wrapClassName","modalClassName","backdropClassName","contentClassName","fade","cssModule","object","zIndex","number","unmountOnClose","returnFocusAfterClose"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from \"./profile.module.scss\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Label, Form, FormGroup } from 'reactstrap';\r\n\r\nconst ReportTraffickingModalWindow = (props) => {\r\n  const {\r\n    buttonLabel,\r\n    className\r\n  } = props;\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  return (\r\n    <div>\r\n      <Form inline onSubmit={(e) => e.preventDefault()}>\r\n        <Button color=\"\" className={`font-weight-bold text-white w-100 ${s.report_btn}`} onClick={toggle}>{buttonLabel}</Button>\r\n      </Form>\r\n\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle} style={{ fontFamily: 'Audiowide, cursive' }} className=\"bg-dark text-info border-bottom border-secondary\" >{buttonLabel}</ModalHeader>\r\n        <ModalBody className=\"pb-0 bg-dark text-white\">\r\n          <h5>ANTI-TRAFFICKING ADVOCACY:</h5>\r\n          <p>VibeCity is wholly committed to raising awareness on the issue of human trafficking and engages in best practices and advocacy. In the event we become aware of any incident of trafficking, we cooperate enthusiastically with law enforcement and agencies involved in combating the abuse of human rights.</p>\r\n          <p><strong>Please report any suspected sexual exploitation of minors and/or human trafficking to the appropriate authorities.</strong></p>\r\n        </ModalBody>\r\n        <Form className=\"container bg-dark text-white\">\r\n          <FormGroup>\r\n            <Label className=\"w-100 d-block\">\r\n              Link for Evidence of Misuse:\r\n              <Input type=\"text\" onChange={() => { }} className=\"w-100 d-block bg-dark text-white boredr border-secondary\" placeholder=\"http://...\" />\r\n            </Label>\r\n          </FormGroup>\r\n        </Form>\r\n        <ModalFooter className=\"bg-dark text-white border-top border-secondary\">\r\n          <Button color=\"info\" onClick={toggle}>SEND REPORT</Button>{' '}\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReportTraffickingModalWindow;\r\n\r\n\r\nModal.propTypes = {\r\n  // boolean to control the state of the popover\r\n  isOpen: PropTypes.bool,\r\n  autoFocus: PropTypes.bool,\r\n  // if modal should be centered vertically in viewport\r\n  centered: PropTypes.bool,\r\n  // corresponds to bootstrap's modal sizes, ie. 'lg' or 'sm'\r\n  size: PropTypes.string,\r\n  // callback for toggling isOpen in the controlling component\r\n  toggle: PropTypes.func,\r\n  role: PropTypes.string, // defaults to \"dialog\"\r\n  // used to reference the ID of the title element in the modal\r\n  labelledBy: PropTypes.string,\r\n  keyboard: PropTypes.bool,\r\n  // control backdrop, see http://v4-alpha.getbootstrap.com/components/modal/#options\r\n  backdrop: PropTypes.oneOfType([\r\n    PropTypes.bool,\r\n    PropTypes.oneOf(['static'])\r\n  ]),\r\n  // if body of modal should be scrollable when content is long\r\n  scrollable: PropTypes.bool,\r\n  // allows for a node/component to exist next to the modal (outside of it). Useful for external close buttons\r\n  // external: PropTypes.node,\r\n  // called on componentDidMount\r\n  onEnter: PropTypes.func,\r\n  // called on componentWillUnmount\r\n  onExit: PropTypes.func,\r\n  // called when done transitioning in\r\n  onOpened: PropTypes.func,\r\n  // called when done transitioning out\r\n  onClosed: PropTypes.func,\r\n  className: PropTypes.string,\r\n  wrapClassName: PropTypes.string,\r\n  modalClassName: PropTypes.string,\r\n  backdropClassName: PropTypes.string,\r\n  contentClassName: PropTypes.string,\r\n  // boolean to control whether the fade transition occurs (default: true)\r\n  fade: PropTypes.bool,\r\n  cssModule: PropTypes.object,\r\n  // zIndex defaults to 1000.\r\n  zIndex: PropTypes.oneOfType([\r\n    PropTypes.number,\r\n    PropTypes.string,\r\n  ]),\r\n  // if modal should be destructed/removed from DOM after closing\r\n  unmountOnClose: PropTypes.bool, // defaults to true\r\n  // if the element which triggered the modal to open should focused after the modal closes (see example somewhere below)\r\n  returnFocusAfterClose: PropTypes.bool // defaults to true\r\n}\r\n"]},"metadata":{},"sourceType":"module"}