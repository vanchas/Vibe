{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { CREATE_POST, FETCH_POST, SHOW_LOADER, HIDE_LOADER, SHOW_ALERT, HIDE_ALERT } from \"./types\";\n// import fetch from 'isomorphic-unfetch';\nexport function createPost(post) {\n  return {\n    type: CREATE_POST,\n    payload: post\n  };\n}\n;\nexport function showLoader() {\n  return {\n    type: SHOW_LOADER\n  };\n}\nexport function hideLoader() {\n  return {\n    type: HIDE_LOADER\n  };\n}\nexport function showAlert(text) {\n  return function (dispatch) {\n    dispatch({\n      type: SHOW_ALERT,\n      payload: text\n    });\n    setTimeout(function () {\n      dispatch(hideAlert());\n    }, 3000);\n  };\n}\nexport function hideAlert() {\n  return {\n    type: HIDE_ALERT\n  };\n}\nexport function fetchPosts() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var json;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              try {\n                dispatch(showLoader());\n                json = [{\n                  \"userId\": 1,\n                  \"id\": 1,\n                  \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n                  \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n                }, {\n                  \"userId\": 1,\n                  \"id\": 2,\n                  \"title\": \"qui est esse\",\n                  \"body\": \"est rerum tempore vitae\\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\\nqui aperiam non debitis possimus qui neque nisi nulla\"\n                }, {\n                  \"userId\": 1,\n                  \"id\": 3,\n                  \"title\": \"ea molestias quasi exercitationem repellat qui ipsa sit aut\",\n                  \"body\": \"et iusto sed quo iure\\nvoluptatem occaecati omnis eligendi aut ad\\nvoluptatem doloribus vel accusantium quis pariatur\\nmolestiae porro eius odio et labore et velit aut\"\n                }, {\n                  \"userId\": 1,\n                  \"id\": 4,\n                  \"title\": \"eum et est occaecati\",\n                  \"body\": \"ullam et saepe reiciendis voluptatem adipisci\\nsit amet autem assumenda provident rerum culpa\\nquis hic commodi nesciunt rem tenetur doloremque ipsam iure\\nquis sunt voluptatem rerum illo velit\"\n                }, {\n                  \"userId\": 1,\n                  \"id\": 5,\n                  \"title\": \"nesciunt quas odio\",\n                  \"body\": \"repudiandae veniam quaerat sunt sed\\nalias aut fugiat sit autem sed est\\nvoluptatem omnis possimus esse voluptatibus quis\\nest aut tenetur dolor neque\"\n                }];\n                setTimeout(function () {\n                  throw Error;\n                  dispatch({\n                    type: FETCH_POST,\n                    payload: json\n                  });\n                  dispatch(hideLoader());\n                }, 500);\n              } catch (e) {\n                dispatch(showAlert('Something going wrong'));\n                dispatch(hideLoader());\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}\n; // const response = await fetch('https://jsonplaceholder.typicode.com/todos?_limit=5', {\n//     method: 'GET',\n//     headers: {\n//         'Content-Type': 'application/json'\n//     }\n// });\n// const json = await response.json();","map":{"version":3,"sources":["C:/Users/user/projects/vibe/src/redux/actions/actions.ts"],"names":["CREATE_POST","FETCH_POST","SHOW_LOADER","HIDE_LOADER","SHOW_ALERT","HIDE_ALERT","createPost","post","type","payload","showLoader","hideLoader","showAlert","text","dispatch","setTimeout","hideAlert","fetchPosts","json","Error","e"],"mappings":";;AAAA,SAASA,WAAT,EAA8CC,UAA9C,EAA0DC,WAA1D,EAAuEC,WAAvE,EAAoFC,UAApF,EAAgGC,UAAhG,QAAkH,SAAlH;AAEA;AAEA,OAAO,SAASC,UAAT,CAAoBC,IAApB,EAAkD;AACrD,SAAO;AACHC,IAAAA,IAAI,EAAER,WADH;AAEHS,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH;AAAA;AAED,OAAO,SAASG,UAAT,GAAsB;AACzB,SAAO;AACHF,IAAAA,IAAI,EAAEN;AADH,GAAP;AAGH;AACD,OAAO,SAASS,UAAT,GAAsB;AACzB,SAAO;AACHH,IAAAA,IAAI,EAAEL;AADH,GAAP;AAGH;AACD,OAAO,SAASS,SAAT,CAAmBC,IAAnB,EAAiC;AACpC,SAAO,UAACC,QAAD,EAAwB;AAC3BA,IAAAA,QAAQ,CAAC;AACLN,MAAAA,IAAI,EAAEJ,UADD;AAELK,MAAAA,OAAO,EAAEI;AAFJ,KAAD,CAAR;AAIAE,IAAAA,UAAU,CAAC,YAAM;AACbD,MAAAA,QAAQ,CAACE,SAAS,EAAV,CAAR;AACH,KAFS,EAEP,IAFO,CAAV;AAGH,GARD;AASH;AACD,OAAO,SAASA,SAAT,GAAqB;AACxB,SAAO;AACHR,IAAAA,IAAI,EAAEH;AADH,GAAP;AAGH;AAED,OAAO,SAASY,UAAT,GAA2B;AAC9B;AAAA,wEAAO,iBAAOH,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,kBAAI;AACAA,gBAAAA,QAAQ,CAACJ,UAAU,EAAX,CAAR;AACMQ,gBAAAA,IAFN,GAEa,CAAC;AACV,4BAAU,CADA;AAEV,wBAAM,CAFI;AAGV,2BAAS,4EAHC;AAIV,0BAAQ;AAJE,iBAAD,EAMb;AACI,4BAAU,CADd;AAEI,wBAAM,CAFV;AAGI,2BAAS,cAHb;AAII,0BAAQ;AAJZ,iBANa,EAYb;AACI,4BAAU,CADd;AAEI,wBAAM,CAFV;AAGI,2BAAS,6DAHb;AAII,0BAAQ;AAJZ,iBAZa,EAkBb;AACI,4BAAU,CADd;AAEI,wBAAM,CAFV;AAGI,2BAAS,sBAHb;AAII,0BAAQ;AAJZ,iBAlBa,EAwBb;AACI,4BAAU,CADd;AAEI,wBAAM,CAFV;AAGI,2BAAS,oBAHb;AAII,0BAAQ;AAJZ,iBAxBa,CAFb;AAgCAH,gBAAAA,UAAU,CAAC,YAAM;AACb,wBAAMI,KAAN;AACAL,kBAAAA,QAAQ,CAAC;AAAEN,oBAAAA,IAAI,EAAEP,UAAR;AAAoBQ,oBAAAA,OAAO,EAAES;AAA7B,mBAAD,CAAR;AACAJ,kBAAAA,QAAQ,CAACH,UAAU,EAAX,CAAR;AACH,iBAJS,EAIP,GAJO,CAAV;AAKH,eArCD,CAqCE,OAAOS,CAAP,EAAU;AACRN,gBAAAA,QAAQ,CAACF,SAAS,CAAC,uBAAD,CAAV,CAAR;AACAE,gBAAAA,QAAQ,CAACH,UAAU,EAAX,CAAR;AACH;;AAzCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AA2CH;AAAA,C,CAED;AACY;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { CREATE_POST, PostsActionTypes, Post, FETCH_POST, SHOW_LOADER, HIDE_LOADER, SHOW_ALERT, HIDE_ALERT } from \"./types\"\r\nimport { Dispatch } from 'redux';\r\n// import fetch from 'isomorphic-unfetch';\r\n\r\nexport function createPost(post: Post): PostsActionTypes {\r\n    return {\r\n        type: CREATE_POST,\r\n        payload: post\r\n    }\r\n};\r\n\r\nexport function showLoader() {\r\n    return {\r\n        type: SHOW_LOADER\r\n    }\r\n}\r\nexport function hideLoader() {\r\n    return {\r\n        type: HIDE_LOADER\r\n    }\r\n}\r\nexport function showAlert(text: string) {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch({\r\n            type: SHOW_ALERT,\r\n            payload: text\r\n        })\r\n        setTimeout(() => {\r\n            dispatch(hideAlert())\r\n        }, 3000)\r\n    }\r\n}\r\nexport function hideAlert() {\r\n    return {\r\n        type: HIDE_ALERT\r\n    }\r\n}\r\n\r\nexport function fetchPosts(): any {\r\n    return async (dispatch: Function) => {\r\n        try {\r\n            dispatch(showLoader());\r\n            const json = [{\r\n                \"userId\": 1,\r\n                \"id\": 1,\r\n                \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\r\n                \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\r\n            },\r\n            {\r\n                \"userId\": 1,\r\n                \"id\": 2,\r\n                \"title\": \"qui est esse\",\r\n                \"body\": \"est rerum tempore vitae\\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\\nqui aperiam non debitis possimus qui neque nisi nulla\"\r\n            },\r\n            {\r\n                \"userId\": 1,\r\n                \"id\": 3,\r\n                \"title\": \"ea molestias quasi exercitationem repellat qui ipsa sit aut\",\r\n                \"body\": \"et iusto sed quo iure\\nvoluptatem occaecati omnis eligendi aut ad\\nvoluptatem doloribus vel accusantium quis pariatur\\nmolestiae porro eius odio et labore et velit aut\"\r\n            },\r\n            {\r\n                \"userId\": 1,\r\n                \"id\": 4,\r\n                \"title\": \"eum et est occaecati\",\r\n                \"body\": \"ullam et saepe reiciendis voluptatem adipisci\\nsit amet autem assumenda provident rerum culpa\\nquis hic commodi nesciunt rem tenetur doloremque ipsam iure\\nquis sunt voluptatem rerum illo velit\"\r\n            },\r\n            {\r\n                \"userId\": 1,\r\n                \"id\": 5,\r\n                \"title\": \"nesciunt quas odio\",\r\n                \"body\": \"repudiandae veniam quaerat sunt sed\\nalias aut fugiat sit autem sed est\\nvoluptatem omnis possimus esse voluptatibus quis\\nest aut tenetur dolor neque\"\r\n            }];\r\n            setTimeout(() => {\r\n                throw Error;\r\n                dispatch({ type: FETCH_POST, payload: json });\r\n                dispatch(hideLoader());\r\n            }, 500);\r\n        } catch (e) {\r\n            dispatch(showAlert('Something going wrong'));\r\n            dispatch(hideLoader());\r\n        }\r\n    }\r\n};\r\n\r\n// const response = await fetch('https://jsonplaceholder.typicode.com/todos?_limit=5', {\r\n            //     method: 'GET',\r\n            //     headers: {\r\n            //         'Content-Type': 'application/json'\r\n            //     }\r\n            // });\r\n            // const json = await response.json();"]},"metadata":{},"sourceType":"module"}