{"ast":null,"code":"import { Role } from './';\nexport function configureFakeBackend() {\n  let users = [{\n    id: 1,\n    username: 'admin',\n    password: 'admin',\n    firstName: 'Admin',\n    lastName: 'Admin',\n    role: Role.Admin,\n    name: \"Admin\",\n    second_name: null,\n    email: null,\n    phone: \"380953444348\"\n  }, {\n    id: 2,\n    username: 'user',\n    password: 'user',\n    firstName: 'Ivan',\n    lastName: 'User',\n    role: Role.Admin,\n    name: \"User\",\n    second_name: null,\n    email: null,\n    phone: \"380953444348\"\n  },, {\n    id: 3,\n    username: 'pro',\n    password: 'pro',\n    firstName: 'Model',\n    lastName: 'Provider',\n    role: Role.Provider,\n    name: \"Model\",\n    second_name: null,\n    email: null,\n    phone: \"380953444348\"\n  }];\n  let realFetch = window.fetch;\n\n  window.fetch = function (url, opts) {\n    const authHeader = opts.headers['Authorization'];\n    const isLoggedIn = authHeader && authHeader.startsWith('Bearer fake-jwt-token');\n    const roleString = isLoggedIn && authHeader.split('.')[1];\n    const role = roleString ? Role[roleString] : null;\n    return new Promise((resolve, reject) => {\n      // wrap in timeout to simulate server api call\n      setTimeout(() => {\n        // authenticate - public\n        if (url.endsWith('/api/auth/login') && opts.method === 'POST') {\n          const params = JSON.parse(opts.body); // const user = users.find(x => x.username === params.username && x.password === params.password);\n\n          let user;\n          users.forEach(u => {\n            if (u.password === params.password && u.username === params.username) return user = u;\n          });\n          if (!user) return error('Username or password is incorrect');\n          return ok({\n            id: user.id,\n            username: user.username,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            role: user.role,\n            token: `fake-jwt-token.${user.role}`,\n            name: user.name,\n            second_name: user.second_name,\n            email: user.email,\n            phone: user.phone\n          });\n        }\n\n        if (url.endsWith('/api/auth/register') && opts.method === 'POST') {\n          const params = JSON.parse(opts.body);\n          const user = {\n            id: users.length + 1,\n            username: params.username,\n            password: params.password,\n            firstName: 'Normal',\n            lastName: Role.User,\n            name: null,\n            second_name: null,\n            email: null,\n            phone: null\n          };\n          users.push(user);\n          return ok({\n            id: user.id,\n            username: user.username,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            role: user.role,\n            token: `fake-jwt-token.${user.role}`,\n            name: user.name,\n            second_name: user.second_name,\n            email: user.email,\n            phone: user.phone\n          });\n        } // get user by id - admin or user (user can only access their own record)\n\n\n        if (url.match(/\\/users\\/\\d+$/) && opts.method === 'GET') {\n          if (!isLoggedIn) return unauthorised(); // get id from request url\n\n          let urlParts = url.split('/');\n          let id = parseInt(urlParts[urlParts.length - 1]); // only allow normal users access to their own record\n\n          const currentUser = users.find(x => x.role === role);\n          if (id !== currentUser.id && role !== Role.Admin) return unauthorised();\n          const user = users.find(x => x.id === id);\n          return ok(user);\n        } // get all users - admin only\n\n\n        if (url.endsWith('/users') && opts.method === 'GET') {\n          if (role !== Role.Admin) return unauthorised();\n          return ok(users);\n        } // pass through any requests not handled above\n\n\n        realFetch(url, opts).then(response => resolve(response)); // private helper functions\n\n        function ok(body) {\n          resolve({\n            ok: true,\n            text: () => Promise.resolve(JSON.stringify(body))\n          });\n        }\n\n        function unauthorised() {\n          resolve({\n            status: 401,\n            text: () => Promise.resolve(JSON.stringify({\n              message: 'Unauthorised'\n            }))\n          });\n        }\n\n        function error(message) {\n          resolve({\n            status: 400,\n            text: () => Promise.resolve(JSON.stringify({\n              message\n            }))\n          });\n        }\n      }, 500);\n    });\n  };\n}","map":null,"metadata":{},"sourceType":"module"}