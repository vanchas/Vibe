{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { connect } from 'react-redux';\nimport { createPost, showAlert } from '../../redux/actions/actions';\nimport Alert from './Alert';\n\nclass PostForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"submitHandler\", e => {\n      e.preventDefault();\n      const {\n        title\n      } = this.state;\n\n      if (!title.trim()) {\n        return this.props.showAlert('Post title can\\'t be empty');\n      }\n\n      const newPost = {\n        title,\n        id: Date.now().toString()\n      };\n      this.props.createPost(newPost);\n      this.setState({\n        title: ''\n      });\n    });\n\n    _defineProperty(this, \"changeInputHandler\", e => {\n      e.persist();\n      this.setState(prev => _objectSpread(_objectSpread({}, prev), {\n        [e.target.name]: e.target.value\n      }));\n    });\n\n    this.state = {\n      title: ''\n    };\n  }\n\n  render() {\n    return __jsx(\"form\", {\n      onSubmit: this.submitHandler\n    }, this.props.alert && __jsx(Alert, {\n      text: this.props.alert\n    }), __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"label\", {\n      htmlFor: \"title\"\n    }, \"Post title\"), __jsx(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      id: \"title\",\n      name: \"title\",\n      value: this.state.title,\n      onChange: this.changeInputHandler\n    })), __jsx(\"button\", {\n      className: \"btn btn-success\",\n      type: \"submit\"\n    }, \"Create\"));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  alert: state.app.alert\n});\n\nconst mapDispatchToProps = {\n  createPost,\n  showAlert\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(PostForm);","map":null,"metadata":{},"sourceType":"module"}