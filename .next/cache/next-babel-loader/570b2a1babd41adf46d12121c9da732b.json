{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState, useEffect } from \"react\";\nimport s from \"./profile.module.scss\";\nimport ProfileCarousel from \"./ProfileCarousel\";\nimport ProfileVideo from \"./ProfileVideo\";\nimport fav from \"../../assets/images/main/signs/favorite-pink.png\";\nimport crown from \"../../assets/images/main/signs/crown-pink.png\";\nimport star from \"../../assets/images/main/signs/star-pink.png\";\nimport plane from \"../../assets/images/main/signs/plane-pink.png\";\nimport ReportFakePhotosModalWindow from \"./ReportFakePhotos\";\nimport ReportTraffickingModalWindow from \"./ReportTrafficking\";\nimport { useRouter } from \"next/router\";\nexport default function postProfileCard(_ref) {\n  var posts = _ref.posts,\n      postComments = _ref.postComments,\n      createPostComment = _ref.createPostComment,\n      reportPost = _ref.reportPost,\n      alert = _ref.alert,\n      showAlert = _ref.showAlert,\n      addToFavorites = _ref.addToFavorites;\n\n  var _useState = useState(''),\n      commentText = _useState[0],\n      setComment = _useState[1];\n\n  var _useState2 = useState({}),\n      post = _useState2[0],\n      setPost = _useState2[1];\n\n  var router = useRouter();\n  useEffect(function () {\n    var _iterator = _createForOfIteratorHelper(posts),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var p = _step.value;\n\n        if (p.id == router.query.id) {\n          setPost(p);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }, [posts]);\n  return __jsx(\"div\", {\n    className: s.profile\n  }, post.category ? __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: s.card\n  }, __jsx(\"div\", {\n    className: s.image_block\n  }, __jsx(ProfileCarousel, {\n    photo: [post.photo_horizontal, post.photo_vertical]\n  }), __jsx(\"div\", null, __jsx(ProfileVideo, {\n    videoLink: post.video_link\n  })), __jsx(\"div\", {\n    className: s.report_btn_group\n  }, __jsx(ReportFakePhotosModalWindow, {\n    reportPost: reportPost,\n    buttonLabel: 'Report Fake Photos',\n    className: \"\",\n    postId: post.postId,\n    alert: alert,\n    showAlert: showAlert\n  }), __jsx(ReportTraffickingModalWindow, {\n    buttonLabel: 'Report Trafficking',\n    className: \"\"\n  })), __jsx(\"div\", {\n    className: \"\".concat(s.favorite_btn, \" text-white\"),\n    onClick: function onClick() {\n      return addToFavorites(post.id);\n    }\n  }, \"Add to favourites\")), __jsx(\"div\", {\n    className: \"text-white \".concat(s.content_block)\n  }, __jsx(\"div\", {\n    className: s.content_block_header\n  }, __jsx(\"h5\", null, post.first_name, \" \", post.second_name), __jsx(\"span\", null, post.status), __jsx(\"div\", null, __jsx(\"img\", {\n    src: fav,\n    alt: \"\",\n    onClick: function onClick() {\n      return addToFavorites(post.id);\n    }\n  }), __jsx(\"img\", {\n    src: crown,\n    alt: \"\"\n  }), __jsx(\"img\", {\n    src: star,\n    alt: \"\"\n  }), __jsx(\"img\", {\n    src: plane,\n    alt: \"\"\n  }))), __jsx(\"div\", {\n    className: s.content_block_description\n  }, __jsx(\"h6\", null, \"Summary\"), __jsx(\"p\", null, post.summary)), __jsx(\"div\", {\n    className: s.contacts_blue_block\n  }, __jsx(\"div\", null, post.is_verify ? 'VERIFIED VIP OTHER' : null), __jsx(\"div\", null, post.email ? __jsx(\"a\", {\n    href: \"mailto:\".concat(post.email)\n  }, post.email) : 'No access to see email...', post.number ? __jsx(\"a\", {\n    href: \"tel:+\".concat(post.number)\n  }, \"+\", post.number) : 'No access to see number...')), __jsx(\"div\", {\n    className: s.main_content_block\n  }, __jsx(\"div\", {\n    className: s.text_block\n  }, __jsx(\"div\", {\n    className: s.text_block_title\n  }, \"About\"), __jsx(\"p\", null, post.about)), __jsx(\"div\", {\n    className: s.details_block\n  }, __jsx(\"div\", {\n    className: \"mb-1\"\n  }, \"DETAILS\"), __jsx(\"div\", null, __jsx(\"dl\", null, __jsx(\"dt\", null, \"Category:\"), __jsx(\"dd\", null, post.category.name), __jsx(\"dt\", null, \"Gender:\"), __jsx(\"dd\", null, post.gender), __jsx(\"dt\", null, \"Age:\"), __jsx(\"dd\", null, post.age), __jsx(\"dt\", null, \"Ethnicity:\"), __jsx(\"dd\", null, post.ethnicity.value), __jsx(\"dt\", null, \"Hair Color:\"), __jsx(\"dd\", null, post.hair.value), __jsx(\"dt\", null, \"Eye Color:\"), __jsx(\"dd\", null, post.eye.value), __jsx(\"dt\", null, \"Height:\"), __jsx(\"dd\", null, post.height), __jsx(\"dt\", null, \"Affiliation:\"), __jsx(\"dd\", null, post.affiliation.value), __jsx(\"dt\", null, \"Available To:\"), __jsx(\"dd\", null, post.availableto.map(function (a) {\n    return a.value + ' ';\n  })), __jsx(\"dl\", null, \"Availability:\"), __jsx(\"dd\", null, post.availability.map(function (a) {\n    return a.value + ' ';\n  })))), __jsx(\"div\", null, \"CONTACT DETAILS\"), post.number ? __jsx(\"a\", {\n    href: \"tel:+\".concat(post.number)\n  }, \"+\", post.number) : 'No access to see number...', post.email ? __jsx(\"a\", {\n    href: \"mailto:\".concat(post.email)\n  }, post.email) : 'No access to see email...')))), postComments && postComments.length ? __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: s.add_comment_block\n  }, __jsx(\"div\", {\n    className: \"text-white\",\n    onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!commentText.length) {\n                _context.next = 4;\n                break;\n              }\n\n              _context.next = 3;\n              return createPostComment(router.query.id, commentText);\n\n            case 3:\n              setComment('');\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))\n  }, \"LEAVE A COMMENT\"), __jsx(\"textarea\", {\n    onChange: function onChange(e) {\n      return setComment(e.target.value);\n    },\n    rows: \"8\"\n  })), __jsx(\"div\", {\n    className: s.comments_block\n  }, __jsx(\"div\", {\n    className: \"\".concat(s.comments_block_title, \" text-white\")\n  }, \"COMMENTS\"), __jsx(\"ul\", {\n    className: \"list-group p-0\"\n  }, postComments.map(function (c, i) {\n    return __jsx(\"li\", {\n      key: i,\n      className: s.comment\n    }, __jsx(\"div\", {\n      className: s.comment_title\n    }, __jsx(\"span\", null, c.user.name), __jsx(\"span\", null, c.created_at.split('T')[0].split('-').join(' . '))), __jsx(\"p\", null, c.comment));\n  }))), \" \") : null) : __jsx(\"div\", {\n    className: \"text-center py-5\"\n  }, __jsx(\"div\", {\n    className: \"spinner-border text-info\",\n    role: \"status\"\n  }, __jsx(\"span\", {\n    className: \"sr-only\"\n  }, \"Loading...\"))));\n}","map":null,"metadata":{},"sourceType":"module"}