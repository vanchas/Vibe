{"ast":null,"code":"import { Role } from './';\nexport function configureFakeBackend() {\n  var users = [{\n    id: 1,\n    username: 'admin',\n    password: 'admin',\n    firstName: 'Admin',\n    lastName: 'User',\n    role: Role.Admin,\n    name: \"Kirill\",\n    second_name: null,\n    email: null,\n    phone: \"380953444348\",\n    rating: null,\n    position: null,\n    telegram: null,\n    viber: null,\n    whatsapp: null,\n    site: null,\n    avatar: null,\n    email_verified_at: null,\n    activate: 1,\n    bx_id: 26,\n    created_at: \"2020-04-28T08:28:16.000000Z\",\n    updated_at: \"2020-04-28T08:28:34.000000Z\",\n    deleted_at: null,\n    chats: [{\n      desire: {\n        id: 1,\n        title: 'Desire title first'\n      },\n      companion: {\n        id: 3,\n        name: 'John'\n      },\n      messages: [{\n        sender: 'John',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum dolor sit amet'\n      }, {\n        sender: 'Admin',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum dolor sit amet ipsum dolor sit amet'\n      }, {\n        sender: 'John',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum ipsum dolor dolor sit amet'\n      }, {\n        sender: 'Admin',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum amet'\n      }]\n    }, {\n      desire: {\n        id: 2,\n        title: 'Desire title first'\n      },\n      companion: {\n        id: 2,\n        name: 'Ivan'\n      },\n      messages: [{\n        sender: 'Admin',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum dolor sit amet'\n      }, {\n        sender: 'Ivan',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum dolor sit amet ipsum dolor sit amet'\n      }, {\n        sender: 'Admin',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum ipsum dolor dolor sit amet'\n      }, {\n        sender: 'Ivan',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum amet'\n      }]\n    }]\n  }, {\n    id: 2,\n    username: 'user',\n    password: 'user',\n    firstName: 'Ivan',\n    lastName: 'User',\n    role: Role.Admin,\n    name: \"Kirill\",\n    second_name: null,\n    email: null,\n    phone: \"380953444348\",\n    rating: null,\n    position: null,\n    telegram: null,\n    viber: null,\n    whatsapp: null,\n    site: null,\n    avatar: null,\n    email_verified_at: null,\n    activate: 1,\n    bx_id: 26,\n    created_at: \"2020-04-28T08:28:16.000000Z\",\n    updated_at: \"2020-04-28T08:28:34.000000Z\",\n    deleted_at: null,\n    chats: [{\n      desire: {\n        id: 3,\n        title: 'Desire title first'\n      },\n      companion: {\n        id: 1,\n        name: 'Admin'\n      },\n      messages: [{\n        sender: 'Ivan',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum dolor sit amet'\n      }, {\n        sender: 'Admin',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum dolor sit amet ipsum dolor sit amet'\n      }, {\n        sender: 'Ivan',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum ipsum dolor dolor sit amet'\n      }, {\n        sender: 'Admin',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum amet'\n      }]\n    }]\n  },, {\n    id: 3,\n    username: 'user',\n    password: 'user',\n    firstName: 'John',\n    lastName: 'User',\n    role: Role.User,\n    name: \"John\",\n    second_name: null,\n    email: null,\n    phone: \"380953444348\",\n    rating: null,\n    position: null,\n    telegram: null,\n    viber: null,\n    whatsapp: null,\n    site: null,\n    avatar: null,\n    email_verified_at: null,\n    activate: 1,\n    bx_id: 26,\n    created_at: \"2020-04-28T08:28:16.000000Z\",\n    updated_at: \"2020-04-28T08:28:34.000000Z\",\n    deleted_at: null,\n    chats: [{\n      desire: {\n        id: 1,\n        title: 'Desire title first'\n      },\n      companion: {\n        id: 1,\n        name: 'Admin'\n      },\n      messages: [{\n        sender: 'John',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum dolor sit amet'\n      }, {\n        sender: 'Admin',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum dolor sit amet ipsum dolor sit amet'\n      }, {\n        sender: 'John',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum ipsum dolor dolor sit amet'\n      }, {\n        sender: 'Admin',\n        id: Date.now(),\n        date: new Date(),\n        text: 'lorem ipsum amet'\n      }]\n    }]\n  }];\n  var realFetch = window.fetch;\n\n  window.fetch = function (url, opts) {\n    var authHeader = opts.headers['Authorization'];\n    var isLoggedIn = authHeader && authHeader.startsWith('Bearer fake-jwt-token');\n    var roleString = isLoggedIn && authHeader.split('.')[1];\n    var role = roleString ? Role[roleString] : null;\n    return new Promise(function (resolve, reject) {\n      // wrap in timeout to simulate server api call\n      setTimeout(function () {\n        // authenticate - public\n        if (url.endsWith('/api/auth/login') && opts.method === 'POST') {\n          var params = JSON.parse(opts.body);\n          var user = users.find(function (x) {\n            return x.username === params.username && x.password === params.password;\n          });\n          if (!user) return error('Username or password is incorrect');\n          return ok({\n            id: user.id,\n            username: user.username,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            role: user.role,\n            token: \"fake-jwt-token.\".concat(user.role),\n            name: user.name,\n            second_name: user.second_name,\n            email: user.email,\n            phone: user.phone,\n            rating: user.rating,\n            position: user.position,\n            telegram: user.telegram,\n            viber: user.viber,\n            whatsapp: user.whatsapp,\n            site: user.site,\n            avatar: user.avatar,\n            email_verified_at: user.email_verified_at,\n            activate: user.activate,\n            bx_id: user.bx_id,\n            created_at: user.created_at,\n            updated_at: user.updated_at,\n            deleted_at: user.deleted_at,\n            chats: user.chats\n          });\n        }\n\n        if (url.endsWith('/api/auth/register') && opts.method === 'POST') {\n          var _params = JSON.parse(opts.body);\n\n          var _user = {\n            id: users.length + 1,\n            username: _params.username,\n            password: _params.password,\n            firstName: 'Normal',\n            lastName: Role.User,\n            name: null,\n            second_name: null,\n            email: null,\n            phone: null,\n            rating: null,\n            position: null,\n            telegram: null,\n            viber: null,\n            whatsapp: null,\n            site: null,\n            avatar: null,\n            email_verified_at: null,\n            activate: null,\n            bx_id: null,\n            created_at: null,\n            updated_at: null,\n            deleted_at: null,\n            chats: null\n          };\n          users.push(_user);\n          return ok({\n            id: _user.id,\n            username: _user.username,\n            firstName: _user.firstName,\n            lastName: _user.lastName,\n            role: _user.role,\n            token: \"fake-jwt-token.\".concat(_user.role),\n            name: _user.name,\n            second_name: _user.second_name,\n            email: _user.email,\n            phone: _user.phone,\n            rating: _user.rating,\n            position: _user.position,\n            telegram: _user.telegram,\n            viber: _user.viber,\n            whatsapp: _user.whatsapp,\n            site: _user.site,\n            avatar: _user.avatar,\n            email_verified_at: _user.email_verified_at,\n            activate: _user.activate,\n            bx_id: _user.bx_id,\n            created_at: _user.created_at,\n            updated_at: _user.updated_at,\n            deleted_at: _user.deleted_at,\n            chats: _user.chats\n          });\n        } // get user by id - admin or user (user can only access their own record)\n\n\n        if (url.match(/\\/users\\/\\d+$/) && opts.method === 'GET') {\n          if (!isLoggedIn) return unauthorised(); // get id from request url\n\n          var urlParts = url.split('/');\n          var id = parseInt(urlParts[urlParts.length - 1]); // only allow normal users access to their own record\n\n          var currentUser = users.find(function (x) {\n            return x.role === role;\n          });\n          if (id !== currentUser.id && role !== Role.Admin) return unauthorised();\n\n          var _user2 = users.find(function (x) {\n            return x.id === id;\n          });\n\n          return ok(_user2);\n        } // get all users - admin only\n\n\n        if (url.endsWith('/users') && opts.method === 'GET') {\n          if (role !== Role.Admin) return unauthorised();\n          return ok(users);\n        } // pass through any requests not handled above\n\n\n        realFetch(url, opts).then(function (response) {\n          return resolve(response);\n        }); // private helper functions\n\n        function ok(body) {\n          resolve({\n            ok: true,\n            text: function text() {\n              return Promise.resolve(JSON.stringify(body));\n            }\n          });\n        }\n\n        function unauthorised() {\n          resolve({\n            status: 401,\n            text: function text() {\n              return Promise.resolve(JSON.stringify({\n                message: 'Unauthorised'\n              }));\n            }\n          });\n        }\n\n        function error(message) {\n          resolve({\n            status: 400,\n            text: function text() {\n              return Promise.resolve(JSON.stringify({\n                message: message\n              }));\n            }\n          });\n        }\n      }, 500);\n    });\n  };\n}","map":null,"metadata":{},"sourceType":"module"}