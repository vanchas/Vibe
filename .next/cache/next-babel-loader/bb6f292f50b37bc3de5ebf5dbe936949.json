{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { CREATE_POST, FETCH_POST } from \"../actions/types\";\nvar initialState = {\n  posts: [],\n  fetchedPosts: []\n};\nexport var postsReducer = function postsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CREATE_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        posts: state.posts.concat(action.payload)\n      });\n\n    case FETCH_POST:\n      console.log(action);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        fetchedPosts: action.payload\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/user/projects/vibe/src/redux/reducers/postsReducer.ts"],"names":["CREATE_POST","FETCH_POST","initialState","posts","fetchedPosts","postsReducer","state","action","type","concat","payload","console","log"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,UAAtB,QAAwC,kBAAxC;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,YAAY,EAAE;AAFK,CAArB;AAKA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAuC;AAAA,MAAtCC,KAAsC,uEAA9BJ,YAA8B;AAAA,MAAhBK,MAAgB;;AACjE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,WAAL;AACE,6CAAYM,KAAZ;AAAmBH,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,CAAYM,MAAZ,CAAmBF,MAAM,CAACG,OAA1B;AAA1B;;AAEF,SAAKT,UAAL;AACEU,MAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACA,6CAAYD,KAAZ;AAAmBF,QAAAA,YAAY,EAAEG,MAAM,CAACG;AAAxC;;AAEF;AACE,aAAOJ,KAAP;AATJ;AAWD,CAZM","sourcesContent":["import { CREATE_POST, FETCH_POST } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  posts: [],\r\n  fetchedPosts: []\r\n};\r\n\r\nexport const postsReducer = (state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case CREATE_POST:\r\n      return { ...state, posts: state.posts.concat(action.payload) }\r\n\r\n    case FETCH_POST:\r\n      console.log(action)\r\n      return { ...state, fetchedPosts: action.payload }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}