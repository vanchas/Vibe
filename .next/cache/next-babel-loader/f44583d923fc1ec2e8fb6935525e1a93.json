{"ast":null,"code":"import { Role } from './';\nexport function configureFakeBackend() {\n  var users = [{\n    id: 1,\n    username: 'admin',\n    password: 'admin',\n    firstName: 'Admin',\n    lastName: 'Admin',\n    role: Role.Admin,\n    name: \"Admin\",\n    second_name: null,\n    email: null,\n    phone: \"380953444348\"\n  }, {\n    id: 2,\n    username: 'user',\n    password: 'user',\n    firstName: 'Ivan',\n    lastName: 'User',\n    role: Role.Admin,\n    name: \"User\",\n    second_name: null,\n    email: null,\n    phone: \"380953444348\"\n  },, {\n    id: 3,\n    username: 'pro',\n    password: 'pro',\n    firstName: 'Model',\n    lastName: 'Provider',\n    role: Role.Provider,\n    name: \"Model\",\n    second_name: null,\n    email: null,\n    phone: \"380953444348\"\n  }];\n  var realFetch = window.fetch;\n\n  window.fetch = function (url, opts) {\n    var authHeader = opts.headers['Authorization'];\n    var isLoggedIn = authHeader && authHeader.startsWith('Bearer fake-jwt-token');\n    var roleString = isLoggedIn && authHeader.split('.')[1];\n    var role = roleString ? Role[roleString] : null;\n    return new Promise(function (resolve, reject) {\n      // wrap in timeout to simulate server api call\n      setTimeout(function () {\n        // authenticate - public\n        if (url.endsWith('/api/auth/login') && opts.method === 'POST') {\n          var params = JSON.parse(opts.body); // const user = users.find(x => x.username === params.username && x.password === params.password);\n\n          var user;\n          users.forEach(function (u) {\n            if (u.password === params.password && u.username === params.username) return user = u;\n          });\n          if (!user) return error('Username or password is incorrect');\n          return ok({\n            id: user.id,\n            username: user.username,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            role: user.role,\n            token: \"fake-jwt-token.\".concat(user.role),\n            name: user.name,\n            second_name: user.second_name,\n            email: user.email,\n            phone: user.phone\n          });\n        }\n\n        if (url.endsWith('/api/auth/register') && opts.method === 'POST') {\n          var _params = JSON.parse(opts.body);\n\n          var _user = {\n            id: users.length + 1,\n            username: _params.username,\n            password: _params.password,\n            firstName: 'Normal',\n            lastName: Role.User,\n            name: null,\n            second_name: null,\n            email: null,\n            phone: null\n          };\n          users.push(_user);\n          return ok({\n            id: _user.id,\n            username: _user.username,\n            firstName: _user.firstName,\n            lastName: _user.lastName,\n            role: _user.role,\n            token: \"fake-jwt-token.\".concat(_user.role),\n            name: _user.name,\n            second_name: _user.second_name,\n            email: _user.email,\n            phone: _user.phone\n          });\n        } // get user by id - admin or user (user can only access their own record)\n\n\n        if (url.match(/\\/users\\/\\d+$/) && opts.method === 'GET') {\n          if (!isLoggedIn) return unauthorised(); // get id from request url\n\n          var urlParts = url.split('/');\n          var id = parseInt(urlParts[urlParts.length - 1]); // only allow normal users access to their own record\n\n          var currentUser = users.find(function (x) {\n            return x.role === role;\n          });\n          if (id !== currentUser.id && role !== Role.Admin) return unauthorised();\n\n          var _user2 = users.find(function (x) {\n            return x.id === id;\n          });\n\n          return ok(_user2);\n        } // get all users - admin only\n\n\n        if (url.endsWith('/users') && opts.method === 'GET') {\n          if (role !== Role.Admin) return unauthorised();\n          return ok(users);\n        } // pass through any requests not handled above\n\n\n        realFetch(url, opts).then(function (response) {\n          return resolve(response);\n        }); // private helper functions\n\n        function ok(body) {\n          resolve({\n            ok: true,\n            text: function text() {\n              return Promise.resolve(JSON.stringify(body));\n            }\n          });\n        }\n\n        function unauthorised() {\n          resolve({\n            status: 401,\n            text: function text() {\n              return Promise.resolve(JSON.stringify({\n                message: 'Unauthorised'\n              }));\n            }\n          });\n        }\n\n        function error(message) {\n          resolve({\n            status: 400,\n            text: function text() {\n              return Promise.resolve(JSON.stringify({\n                message: message\n              }));\n            }\n          });\n        }\n      }, 500);\n    });\n  };\n}","map":{"version":3,"sources":["/home/dev-2/WebstormProjects/vibe/src/_helpers/fake-backend.js"],"names":["Role","configureFakeBackend","users","id","username","password","firstName","lastName","role","Admin","name","second_name","email","phone","Provider","realFetch","window","fetch","url","opts","authHeader","headers","isLoggedIn","startsWith","roleString","split","Promise","resolve","reject","setTimeout","endsWith","method","params","JSON","parse","body","user","forEach","u","error","ok","token","length","User","push","match","unauthorised","urlParts","parseInt","currentUser","find","x","then","response","text","stringify","status","message"],"mappings":"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","sourcesContent":["import { Role } from './'\n\nexport function configureFakeBackend() {\n  let users = [\n    {\n      id: 1,\n      username: 'admin',\n      password: 'admin',\n      firstName: 'Admin',\n      lastName: 'Admin',\n      role: Role.Admin,\n      name: \"Admin\",\n      second_name: null,\n      email: null,\n      phone: \"380953444348\",\n    },\n    {\n      id: 2,\n      username: 'user',\n      password: 'user',\n      firstName: 'Ivan',\n      lastName: 'User',\n      role: Role.Admin,\n      name: \"User\",\n      second_name: null,\n      email: null,\n      phone: \"380953444348\",\n    },\n    ,\n    {\n      id: 3,\n      username: 'pro',\n      password: 'pro',\n      firstName: 'Model',\n      lastName: 'Provider',\n      role: Role.Provider,\n      name: \"Model\",\n      second_name: null,\n      email: null,\n      phone: \"380953444348\"\n    }\n  ];\n\n  let realFetch = window.fetch;\n  window.fetch = function (url, opts) {\n    const authHeader = opts.headers['Authorization'];\n    const isLoggedIn = authHeader && authHeader.startsWith('Bearer fake-jwt-token');\n    const roleString = isLoggedIn && authHeader.split('.')[1];\n    const role = roleString ? Role[roleString] : null;\n\n    return new Promise((resolve, reject) => {\n      // wrap in timeout to simulate server api call\n      setTimeout(() => {\n        // authenticate - public\n        if (url.endsWith('/api/auth/login') && opts.method === 'POST') {\n          const params = JSON.parse(opts.body);\n          // const user = users.find(x => x.username === params.username && x.password === params.password);\n          let user;\n          users.forEach(u => {\n            if (u.password === params.password && u.username === params.username) return user = u;\n          });\n          \n          if (!user) return error('Username or password is incorrect');\n          return ok({\n            id: user.id,\n            username: user.username,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            role: user.role,\n            token: `fake-jwt-token.${user.role}`,\n            name: user.name,\n            second_name: user.second_name,\n            email: user.email,\n            phone: user.phone\n          });\n        }\n\n        if (url.endsWith('/api/auth/register') && opts.method === 'POST') {\n          const params = JSON.parse(opts.body);\n          const user = {\n            id: users.length + 1,\n            username: params.username,\n            password: params.password,\n            firstName: 'Normal',\n            lastName: Role.User,\n            name: null,\n            second_name: null,\n            email: null,\n            phone: null\n          };\n          users.push(user);\n\n          return ok({\n            id: user.id,\n            username: user.username,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            role: user.role,\n            token: `fake-jwt-token.${user.role}`,\n            name: user.name,\n            second_name: user.second_name,\n            email: user.email,\n            phone: user.phone\n          });\n        }\n\n        // get user by id - admin or user (user can only access their own record)\n        if (url.match(/\\/users\\/\\d+$/) && opts.method === 'GET') {\n          if (!isLoggedIn) return unauthorised();\n\n          // get id from request url\n          let urlParts = url.split('/');\n          let id = parseInt(urlParts[urlParts.length - 1]);\n\n          // only allow normal users access to their own record\n          const currentUser = users.find(x => x.role === role);\n          if (id !== currentUser.id && role !== Role.Admin) return unauthorised();\n\n          const user = users.find(x => x.id === id);\n          return ok(user);\n        }\n\n        // get all users - admin only\n        if (url.endsWith('/users') && opts.method === 'GET') {\n          if (role !== Role.Admin) return unauthorised();\n          return ok(users);\n        }\n\n        // pass through any requests not handled above\n        realFetch(url, opts).then(response => resolve(response));\n\n        // private helper functions\n\n        function ok(body) {\n          resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(body)) })\n        }\n\n        function unauthorised() {\n          resolve({ status: 401, text: () => Promise.resolve(JSON.stringify({ message: 'Unauthorised' })) })\n        }\n\n        function error(message) {\n          resolve({ status: 400, text: () => Promise.resolve(JSON.stringify({ message })) })\n        }\n      }, 500);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}